invisible(dev.off())
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
dir.create(paste(local_wd_folder, "/Data", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_01", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_02", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_03", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_04", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_05", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_06", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Fig_07", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Supplemental", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Not_Included", sep = ''), showWarnings = F)
# Define the data folder and output folder
data_folder <- './Data'
figures_folder <- './Figures'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ComplexHeatmap", "stringr", "ggplot2",
"unikn", "RColorBrewer", "yarrr",
"scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages without asking for updates
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(stringr, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(path = paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons/BP-CMML_vs_Control', sep = ''),
showWarnings = F)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ComplexHeatmap", "stringr", "tximport", "DESeq2", "tidyverse",
"plotly", "dplyr", "R.utils", "GenomicFeatures", "ashr",
"apeglm", "EnhancedVolcano", "IHW", "circlize", "Matrix",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(stringr, quietly = TRUE)
library(reticulate)
library(ComplexHeatmap, quietly = TRUE)
library(EnhancedVolcano)
library(GenomicFeatures)
library(circlize)
library(tidyverse)
library(R.utils)
library(tximport)
library(DESeq2)
library(dplyr)
library(IHW)
library(ashr)
library(apeglm)
library(plotly)
# To create a conda environment first install either miniconda3 or anaconda3 on your OS
# conda create --name BPCMML python-kaleido plotly -c conda-forge
reticulate::use_condaenv("BPCMML")
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ggplot2", "dplyr", "fgsea", "escape", "hrbrthemes",
"tidyr", "ggpubr",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(hrbrthemes, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(escape, quietly = TRUE)
library(stringr, quietly = TRUE)
library(ggpubr, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("GENIE3", "doRNG", "stringr", "WGCNA",
"DESeq2", "flashClust", "ComplexHeatmap", "magick",
"ggplot2", "ggridges", "dplyr", "erer", "enrichR")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
# Load stringr for string manipulation
library(GENIE3)
library(doRNG)
library(stringr)
library(DESeq2)
library(WGCNA)
# Load stringr for string manipulation
library(GENIE3)
library(doRNG)
library(stringr)
library(DESeq2)
#library(WGCNA)
library(ComplexHeatmap)
library(flashClust)
library(magick)
library(ggplot2)
library(ggridges)
library(dplyr)
library(erer)
library(enrichR)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("escape", "dplyr", "stringr", "ComplexHeatmap",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(escape, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(stringr, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
dir.create(paste(data_folder, '/RandomForest/Results', sep = ''), showWarnings = FALSE)
dir.create(paste(data_folder, '/RandomForest/Results/Model', sep = ''), showWarnings = FALSE)
dir.create(paste(data_folder, '/RandomForest/Results/Clustering', sep = ''), showWarnings = FALSE)
dir.create(paste(data_folder, '/RandomForest/Results/Clustering/K2', sep = ''), showWarnings = FALSE)
#results_folder <- './Results'
figures_folder <- './Figures'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("coin", "randomForest", "dplyr", "circlize", "ComplexHeatmap",
"dendextend", "ggrepel", "ggplot2", "rstatix", "tidyverse",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(coin, quietly = TRUE)
#library(coin, quietly = TRUE)
library(rstatix, quietly = TRUE)
library(randomForest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(circlize, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dendextend, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons/C1_vs_Control', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons/C2_vs_Control', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons/C1_vs_C2', sep = ''),
showWarnings = F)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("stringr", "GenomicFeatures", "circlize", "tidyverse",
"DESeq2", "apeglm", "ashr", "ComplexHeatmap", "magick", "EnhancedVolcano",
"IHW", "ggplot2", "dplyr", "tximport", "VennDiagram", "erer", "gplots")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(stringr, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(magick, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(VennDiagram, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(erer, quietly = TRUE)
library(gplots, quietly = TRUE)
library(tximport, quietly = TRUE)
library(IHW, quietly = TRUE)
library(ashr, quietly = TRUE)
library(apeglm, quietly = TRUE)
library(GenomicFeatures, quietly = TRUE)
library(circlize, quietly = TRUE)
library(tidyverse, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/C1_vs_C2', sep = ''),
showWarnings = F)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ggplot2", "dplyr", "fgsea",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(fgsea, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(dplyr, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/Pathway_Correlations', sep = ''),
showWarnings = F)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ggplot2", "dplyr", "smplot2", "WGCNA", "tidyr",
"ggrepel", "ComplexHeatmap",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(ggplot2, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(smplot2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(WGCNA, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(smplot2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dplyr, quietly = TRUE)
#library(WGCNA, quietly = TRUE)
library(tidyr, quietly = TRUE)
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(paste(data_folder, '/RandomForest/Results/Clustering/K5', sep = ''), showWarnings = FALSE)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18", ask = FALSE)
# Define a list of required packages used in this script
packages_required <- c("ggplot2", "dplyr", "coin", "randomForest", "rstatix",
"Boruta", "rattle", "caret", "ROCR", "pROC", "dendextend",
"ComplexHeatmap", "ggrepel", "readr",
"unikn", "RColorBrewer", "yarrr", "scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled, ask = FALSE)
library(ggplot2, quietly = TRUE)
library(readr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(randomForest, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(coin, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(readr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(randomForest, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dplyr, quietly = TRUE)
#library(coin, quietly = TRUE)
library(rstatix, quietly = TRUE)
library(Boruta, quietly = TRUE)
library(rattle, quietly = TRUE)
library(caret, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(readr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(randomForest, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(dplyr, quietly = TRUE)
#library(coin, quietly = TRUE)
library(rstatix, quietly = TRUE)
library(Boruta, quietly = TRUE)
library(rattle, quietly = TRUE)
#library(caret, quietly = TRUE)
library(ROCR, quietly = TRUE)
library(pROC, quietly = TRUE)
library(dendextend, quietly = TRUE)

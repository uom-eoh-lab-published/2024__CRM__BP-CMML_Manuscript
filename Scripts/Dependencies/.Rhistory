print(plot.Hierarchical_clusters_K5_labelled)
# Add the cluster annotations to the RF metadata
RF.metadata.hierarchical_clustering_K5 <- RF.metadata
RF.metadata.hierarchical_clustering_K5[Hierarchical_clustering_K5$Patient.ID,'RF_Cluster'] <- Hierarchical_clustering_K5$Cluster_annotated
# Add the Patient.ID column back into the data frame
RF.metadata.hierarchical_clustering_K5 <- RF.metadata.hierarchical_clustering_K5 %>% add_column(.before = 'Gender', 'Patient.ID' = rownames(RF.metadata.hierarchical_clustering_K5))
# Annotate the clusters
RF.metadata.hierarchical_clustering_K5[rownames(RF.metadata.hierarchical_clustering_K5 %>% filter(RF_Cluster == 'C1A: CD34- HSC/MPP primed')),'RF_Cluster_short'] <- 'C1A'
RF.metadata.hierarchical_clustering_K5[rownames(RF.metadata.hierarchical_clustering_K5 %>% filter(RF_Cluster == 'C1B: CD34+ HSC/MPP primed')),'RF_Cluster_short'] <- 'C1B'
RF.metadata.hierarchical_clustering_K5[rownames(RF.metadata.hierarchical_clustering_K5 %>% filter(RF_Cluster == 'C1C: Myeloid Prog. primed')),'RF_Cluster_short'] <- 'C1C'
RF.metadata.hierarchical_clustering_K5[rownames(RF.metadata.hierarchical_clustering_K5 %>% filter(RF_Cluster == 'C2A: Promonocyte primed')),'RF_Cluster_short'] <- 'C2A'
RF.metadata.hierarchical_clustering_K5[rownames(RF.metadata.hierarchical_clustering_K5 %>% filter(RF_Cluster == 'C2B: Monocyte primed')),'RF_Cluster_short'] <- 'C2B'
# Convert the column to factor
RF.metadata.hierarchical_clustering_K5$RF_Cluster_short <- factor(RF.metadata.hierarchical_clustering_K5$RF_Cluster_short)
# Save the RF metadata with the cluster annotations as a CSV file
write_csv(x = RF.metadata.hierarchical_clustering_K5,
file = paste(data_folder, '/RandomForest/Results/Clustering/K5/RF_K5_Clustered_Metadata.csv', sep = ''))
# Remove the Patient.ID column
RF.metadata.hierarchical_clustering_K5$Patient.ID <- NULL
# Remove the RF_Cluster column from the dataset
RF.metadata.hierarchical_clustering_K5$RF_Cluster <- NULL
# Create a copy of the dataset
RF.metadata.hierarchical_clustering_K5_numerised <- RF.metadata.hierarchical_clustering_K5[1:length(colnames(RF.metadata.hierarchical_clustering_K5))]
# Loop over each unique cluster
for (cluster1 in unique(RF.metadata.hierarchical_clustering_K5_numerised$RF_Cluster_short)) {
# Create a copy of the dataset for each iteration
RF.metadata.hierarchical_clustering_K5_numerised <- RF.metadata.hierarchical_clustering_K5[1:length(colnames(RF.metadata.hierarchical_clustering_K5))]
# Loop over each unique cluster that is not equal to cluster1
for (cluster2 in unique(RF.metadata.hierarchical_clustering_K5_numerised$RF_Cluster_short)[unique(RF.metadata.hierarchical_clustering_K5_numerised$RF_Cluster_short)!= cluster1]) {
# Create a copy of the dataset for each iteration
RF.metadata.hierarchical_clustering_K5_numerised <- RF.metadata.hierarchical_clustering_K5[1:length(colnames(RF.metadata.hierarchical_clustering_K5))]
# Filter the dataset to include only rows where RF_Cluster_short is equal to cluster1 or cluster2
RF.metadata.hierarchical_clustering_K5_numerised <- RF.metadata.hierarchical_clustering_K5_numerised %>% filter(RF_Cluster_short == cluster1 | RF_Cluster_short == cluster2)
# Convert all columns to numeric
for (variable in colnames(RF.metadata.hierarchical_clustering_K5_numerised)[1:length(colnames(RF.metadata.hierarchical_clustering_K5))-1]) {
RF.metadata.hierarchical_clustering_K5_numerised[,variable] <- as.numeric(RF.metadata.hierarchical_clustering_K5_numerised[,variable])
}
# Split the dataset into two groups based on RF_Cluster_short
Group_A <- RF.metadata.hierarchical_clustering_K5_numerised %>% dplyr::filter(RF_Cluster_short == cluster1)
Group_B <- RF.metadata.hierarchical_clustering_K5_numerised %>% dplyr::filter(RF_Cluster_short == cluster2)
# Initialize a data frame to store the results of the Wilcoxon tests
wilcox_t_test_results <- data.frame(row.names = colnames(RF.metadata.hierarchical_clustering_K5_numerised)[1:length(colnames(RF.metadata.hierarchical_clustering_K5))-1])
# Loop over each column in the dataset
for (variable in colnames(RF.metadata.hierarchical_clustering_K5_numerised)[1:length(colnames(RF.metadata.hierarchical_clustering_K5))-1]) {
# If the column has only one unique value, set the p-value to 1 and calculate some descriptive statistics
if (((length(unique(RF.metadata.hierarchical_clustering_K5_numerised[,variable]))) == 1) == TRUE) {
wilcox_t_test_results[variable,'pval'] <- 1
wilcox_t_test_results[variable, paste('Median', cluster1, sep = ' ')] <- median(Group_A[,variable])
wilcox_t_test_results[variable, paste('Median', cluster2, sep = ' ')] <- median(Group_B[,variable])
wilcox_t_test_results[variable, paste('Min', cluster1, sep = ' ')] <- min(Group_A[,variable])
wilcox_t_test_results[variable, paste('Min', cluster2, sep = ' ')] <- min(Group_B[,variable])
wilcox_t_test_results[variable, paste('Max', cluster1, sep = ' ')] <- max(Group_A[,variable])
wilcox_t_test_results[variable, paste('Max', cluster2, sep = ' ')] <- max(Group_B[,variable])
wilcox_t_test_results[variable, paste('Std', cluster1, sep = ' ')] <- sd(Group_A[,variable])
wilcox_t_test_results[variable, paste('Std', cluster2, sep = ' ')] <- sd(Group_B[,variable])
} else {
# Otherwise, perform a Wilcoxon test and calculate some descriptive statistics
p <- coin::wilcox_test(formula = get(variable) ~ as.factor(RF_Cluster_short), data=RF.metadata.hierarchical_clustering_K5_numerised, distribution = "exact")
wilcox_t_test_results[variable,'pval'] <- coin::pvalue(p)
wilcox_t_test_results[variable, paste('Median', cluster1, sep = ' ')] <- median(Group_A[,variable])
wilcox_t_test_results[variable, paste('Median', cluster2, sep = ' ')] <- median(Group_B[,variable])
wilcox_t_test_results[variable, paste('Min', cluster1, sep = ' ')] <- min(Group_A[,variable])
wilcox_t_test_results[variable, paste('Min', cluster2, sep = ' ')] <- min(Group_B[,variable])
wilcox_t_test_results[variable, paste('Max', cluster1, sep = ' ')] <- max(Group_A[,variable])
wilcox_t_test_results[variable, paste('Max', cluster2, sep = ' ')] <- max(Group_B[,variable])
wilcox_t_test_results[variable, paste('Std', cluster1, sep = ' ')] <- sd(Group_A[,variable])
wilcox_t_test_results[variable, paste('Std', cluster2, sep = ' ')] <- sd(Group_B[,variable])
}
}
# Sort the results by p-value
wilcox_t_test_results <- wilcox_t_test_results %>% arrange(pval)
# Save the results to a CSV file
write.csv(wilcox_t_test_results,
file = paste(data_folder, '/RandomForest/Results/Clustering/K5/RF_K5_Stats_Wilcox_t_test__',
cluster1, '_vs_', cluster2, '.csv', sep = ''),
row.names = T, quote = F)
}
}
RF_cluster_metadata <- read.csv(paste(data_folder, '/RandomForest/Results/Clustering/K5/RF_K5_Clustered_Metadata.csv',
sep = ''), row.names = 'Patient.ID')
VanGalen_celltype_enrichment_scores <- as.matrix(RF_cluster_metadata[,79:86])
colnames(VanGalen_celltype_enrichment_scores) <- c('HSC-like',
'HSC.Prog-like',
'Progenitor-like',
'GMP-like',
'Promono-like',
'Monocyte-like',
'cDC-like',
'Myeloid-like')
VanGalen_celltype_enrichment_scores <- t(VanGalen_celltype_enrichment_scores)
Identity <- data.frame(row.names = rownames(RF_cluster_metadata))
Identity$RF_Cluster <- factor(RF_cluster_metadata$RF_Cluster_short,
levels=c('C1A',
'C1C',
'C1B',
'C2A',
'C2B'))
colors_annotation <-  list(RF_Cluster = c('C1A' = '#87551B',
'C1C' = '#E0B090',
'C1B' = '#C67942',
'C2A' = '#7CB7B0',
'C2B' = '#539690'))
col_anno <- HeatmapAnnotation(df=Identity, col = colors_annotation,
gp = gpar(lwd =0.25, col = 'black'), simple_anno_size = unit(2, "mm"),
show_annotation_name = F, show_legend = FALSE,
annotation_legend_param = list(RF_Cluster = list(direction = "vertical")))
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap_vangalen <- Heatmap(VanGalen_celltype_enrichment_scores,
name = 'ssGSEA Score',
column_split = RF_cluster_metadata$RF_Cluster_short, top_annotation = col_anno,
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_names_gp = gpar(fontsize=10), cluster_column_slices  = F, cluster_rows = F,
column_names_gp = gpar(fontsize=10), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
png(filename = paste(figures_folder, '/Fig_07/Panel_C.png', sep = ''), units = "cm", width = 18.62, height = 7, res = 300)
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
# # We also saved a high dpi copy to be used to assemble a high resolution composite figure for the manuscript (render not included in GitHub repo due to size restriction)
# pdf(file = paste(figures_folder, '/Fig_07/Panel_C.pdf', sep = ''),
#     width = 7.3307087, height = 2.75591)
# draw(HMap_vangalen, heatmap_legend_side = "bottom",
#      annotation_legend_side = "bottom")
# invisible(dev.off())
# Load drug response data
BeatAML_drug_response <- as.matrix(RF_cluster_metadata[,91:177])
# Set column names
colnames(BeatAML_drug_response) <- c(
"A-674563",
"ABT-737",
"Afatinib (BIBW-2992)",
"AT7519",
"Axitinib (AG-013736)",
"AZD1152-HQPA (AZD2811)",
"AZD1480",
"Bay 11-7085",
"BEZ235",
"Birinapant",
"Bortezomib (Velcade)",
"Bosutinib (SKI-606)",
"Cabozantinib",
"CI-1040 (PD184352)",
"Crenolanib",
"Crizotinib (PF-2341066)",
"CYT387",
"Dasatinib",
"Doramapimod (BIRB 796)",
"Dovitinib (CHIR-258)",
"Elesclomol",
"Entospletinib (GS-9973)",
"Entrectinib",
"Flavopiridol",
"Foretinib (XL880)",
"GDC-0941",
"Gilteritinib",
"GSK-1838705A",
"GW-2580",
"H-89",
"Ibrutinib (PCI-32765)",
"Idelalisib",
"Indisulam",
"INK-128",
"JAK Inhibitor I",
"JNJ-28312141",
"JNJ-38877605",
"JQ1",
"KI20227",
"KU-55933",
"KW-2449",
"Lenalidomide",
"Lenvatinib",
"Linifanib (ABT-869)",
"Masitinib (AB-1010)",
"MGCD-265",
"Midostaurin",
"MK-2206",
"MLN120B",
"Neratinib (HKI-272)",
"NF-kB Activation Inhibitor",
"Nutlin 3a",
"NVP-ADW742",
"NVP-TAE684",
"OTX-015",
"Panobinostat",
"PD173955",
"Pelitinib (EKB-569)",
"Perhexiline maleate",
"PH-797804",
"PHA-665752",
"PI-103",
"Ponatinib (AP24534)",
"PP242",
"PRT062607",
"Quizartinib (AC220)",
"RAF265 (CHIR-265)",
"Ralimetinib (LY2228820)",
"Ranolazine",
"Rapamycin",
"Regorafenib (BAY 73-4506)",
"S31-201",
"Selinexor",
"Selumetinib (AZD6244)",
"SNS-032 (BMS-387032)",
"Sorafenib",
"Sunitinib",
"Tivozanib (AV-951)",
"Tofacitinib (CP-690550)",
"Tozasertib (VX-680)",
"Trametinib (GSK1120212)",
"Vandetanib (ZD6474)",
"Vargetef",
"Vatalanib (PTK787)",
"Volasertib (BI-6727)",
"VX-745",
"Tanespimycin (17-AAG)")
# Create a data frame for identity information
Identity <- data.frame(row.names = rownames(RF_cluster_metadata))
# Assign RF cluster information to the identity data frame
Identity$RF_Cluster <- factor(RF_cluster_metadata$RF_Cluster_short,
levels=c('C1B', 'C1C', 'C1A', 'C2A', 'C2B'))
# Define colors for annotation
colors_annotation <-  list(RF_Cluster = c('C1A' = '#87551B',
'C1C' = '#E0B090',
'C1B' = '#C67942',
'C2A' = '#7CB7B0',
'C2B' = '#539690'))
# Create row annotation
row_anno <- rowAnnotation(df=Identity, col = colors_annotation,
gp = gpar(lwd =0.25, col = 'black'), simple_anno_size = unit(5, "mm"),
show_annotation_name = F, show_legend = FALSE,
annotation_legend_param = list(RF_Cluster = list(direction = "vertical")))
# Define color gradient for heatmap
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
# Set seed for reproducibility
set.seed(1337)
# Perform hierarchical clustering
dendro <- stats::hclust(dist(t(BeatAML_drug_response)), method = 'ward.D') %>% as.dendrogram %>% ladderize
# Cut dendrogram into clusters
Hierchical_clusters_drugs <- sort(cutree(dendro, k = 3))
# Create a data frame for drug clusters
drug_df <- data.frame(row.names = names(Hierchical_clusters_drugs))
# Assign cluster information to the drug data frame
for (drug in rownames(drug_df)) {
drug_df[drug,'Hierarchical_cluster'] <- Hierchical_clusters_drugs[[drug]]
}
# Convert cluster information to factor
drug_df$Hierarchical_cluster <- factor(drug_df$Hierarchical_cluster, levels = c('1','2','3'))
# Create heatmap
HMap_BeatAMLdrugs <- Heatmap(BeatAML_drug_response[,rownames(drug_df)],
name = 'ssGSEA Score',
row_split = RF_cluster_metadata$RF_Cluster_short,
left_annotation  = row_anno,
column_split = drug_df$Hierarchical_cluster,
col = col_heatmap_guide,
rect_gp = gpar(col = "black", lwd = 0.05),
cluster_row_slices = F,
cluster_column_slices = F,
column_title_gp = gpar(fontsize=0, fontface='bold'),
row_names_gp = gpar(fontsize=9),
column_gap = unit(c(2.5,2.5), "mm"),
cluster_rows = T,
cluster_columns = T,
column_names_gp = gpar(fontsize=9),
show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_width = unit(5, "cm")),
row_names_side = 'right')
draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
# Draw heatmap and save as PNG
png(filename = paste(figures_folder, '/Fig_07/Panel_D.png', sep = ''), units = "cm", width = 30, height = 22, res = 300)
draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
# # We also saved a high dpi copy to be used to assemble a high resolution composite figure for the manuscript (render not included in GitHub repo due to size restriction)
# pdf(file = paste(figures_folder, '/Fig_07/Panel_D.pdf', sep = ''),
#     width = 11.811, height = 8.66142)
# draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom",
#      annotation_legend_side = "bottom")
# invisible(dev.off())
# Load drug families data
Drug_families <- read.csv(paste(data_folder, '/RNASeq/PubliclyAvailable/2022__Vizome__BeatAML/Metadata/Drug_families.txt', sep = ''), sep = '\t')
# Filter drug families that are in the drug response data
Drug_families <- Drug_families %>% filter(inhibitor %in% colnames(BeatAML_drug_response))
# Get unique drug families
Unique_families <- levels(factor(Drug_families$family))[grep(TRUE,table(Drug_families$family) > 1)]
# Create a data frame for unique families
Unique_families_df <- data.frame(row.names = Unique_families)
# Load short names for drug families
Drug_families_short_names <- read.csv(paste(data_folder, '/RNASeq/PubliclyAvailable/2022__Vizome__BeatAML/Metadata/Drug_families_short_names.txt', sep = ''), sep = '\t')
# Assign short names to unique families
for (unique_family in Unique_families) {
Unique_families_df[unique_family,'Short_name'] <- (Drug_families_short_names %>% filter(family == unique_family))$synonym
}
# Create a data frame for family sensitivity score
family_sensitivity_score <- data.frame(row.names = rownames(BeatAML_drug_response))
# Calculate median sensitivity score for each family
for (unique_family in Unique_families) {
family_sensitivity_score[,Unique_families_df[unique_family,'Short_name']] <- matrixStats::rowMedians(BeatAML_drug_response[,(Drug_families %>% filter(family == unique_family))$inhibitor])
}
# Create a data frame for identity information
Identity <- data.frame(row.names = rownames(RF_cluster_metadata))
# Assign RF cluster information to the identity data frame
Identity$RF_Cluster <- factor(RF_cluster_metadata$RF_Cluster_short, levels=c('C1A', 'C1C', 'C1B', 'C2A', 'C2B'))
# Define colors for annotation
colors_annotation <-  list(RF_Cluster = c('C1A' = '#87551B', 'C1C' = '#E0B090', 'C1B' = '#C67942', 'C2A' = '#7CB7B0', 'C2B' = '#539690'))
# Create row annotation
row_anno <- rowAnnotation(df=Identity, col = colors_annotation, gp = gpar(lwd =0.25, col = 'black'), simple_anno_size = unit(5, "mm"), show_annotation_name = F, show_legend = FALSE, annotation_legend_param = list(RF_Cluster = list(direction = "vertical")))
# Define color gradient for heatmap
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
# Perform hierarchical clustering
dendro <- stats::hclust(dist(t(family_sensitivity_score)), method = 'ward.D2') %>% as.dendrogram %>% ladderize
# Cut dendrogram into clusters
Hierchical_clusters_drugs <- sort(cutree(dendro, k = 3))
# Create a data frame for drug families
drug_family_df <- data.frame(row.names = names(Hierchical_clusters_drugs))
# Assign cluster information to the drug family data frame
for (drug_family in rownames(drug_family_df)) {
drug_family_df[drug_family,'Hierarchical_cluster'] <- Hierchical_clusters_drugs[[drug_family]]
}
# Convert cluster information to factor
drug_family_df$Hierarchical_cluster <- factor(drug_family_df$Hierarchical_cluster, levels = c('3','1','2'))
# Create heatmap
HMap_BeatAMLdrugs <- Heatmap(family_sensitivity_score[,rownames(drug_family_df)],
name = 'ssGSEA Score',
row_split = RF_cluster_metadata$RF_Cluster_short,
left_annotation  = row_anno,
column_split = drug_family_df$Hierarchical_cluster,
col = col_heatmap_guide,
rect_gp = gpar(col = "black", lwd = 0.05),
cluster_row_slices = F,
cluster_column_slices = F,
column_title_gp = gpar(fontsize=0, fontface='bold'),
row_names_gp = gpar(fontsize=9),
column_gap = unit(c(2.5,2.5), "mm"),
cluster_rows = T,
cluster_columns = T,
column_names_gp = gpar(fontsize=9),
show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_width = unit(5, "cm")),
row_names_side = 'right')
draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom", annotation_legend_side = "bottom")
# Draw heatmap and save as PNG
png(filename = paste(figures_folder, '/Fig_07/Panel_E.png', sep = ''), units = "cm", width = 24, height = 24, res = 300)
draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom", annotation_legend_side = "bottom")
invisible(dev.off())
# # We also saved a high dpi copy to be used to assemble a high resolution composite figure for the manuscript (render not included in GitHub repo due to size restriction)
# pdf(file = paste(figures_folder, '/Fig_07/Panel_E.pdf', sep = ''),
#     width = 9.44882, height = 9.44882)
# draw(HMap_BeatAMLdrugs, heatmap_legend_side = "bottom", annotation_legend_side = "bottom")
# invisible(dev.off())
RF_cluster_metadata <- read.csv(paste(data_folder, '/RandomForest/Results/Clustering/K2/RF_K2_Clustered_Metadata.csv',
sep = ''), row.names = 'Patient.ID')
# Select a subset of columns from the metadata
Metadata_subset <- RF_cluster_metadata[,c(1:57, 178)]
# Convert several columns to factors
Metadata_subset$ICC.classification <- factor(as.numeric(factor(Metadata_subset$ICC.classification)))
Metadata_subset$Gender <- factor(Metadata_subset$Gender)
Metadata_subset$Subtype.at.CMML <- factor(Metadata_subset$Subtype.at.CMML)
Metadata_subset$Cutaneous.BPDCN <- factor(Metadata_subset$Cutaneous.BPDCN)
Metadata_subset$RF_Cluster <- factor(Metadata_subset$RF_Cluster)
Metadata_subset$Cytogenetics..at.transformation. <- factor(as.numeric(factor(Metadata_subset$Cytogenetics..at.transformation.)))
# Set a seed for reproducibility
set.seed(123)
# Create a partition for the data
parts = createDataPartition(Metadata_subset$RF_Cluster, p = .7, list = F)
# Split the data into a training set and a test set
train_dataset = Metadata_subset[parts, ]
test_dataset = Metadata_subset[-parts, ]
# Set a seed for reproducibility
set.seed(123)
# Perform feature selection using the Boruta algorithm
boruta_adt <- Boruta(RF_Cluster ~ .,
data = train_dataset,
doTrace = 1,
maxRuns = 3000,
pValue = 0.01,
mcAdj=TRUE)
# Print the Boruta results
print(boruta_adt)
# Apply a rough fix to the Boruta results
boruta_adt <- TentativeRoughFix(boruta_adt)
# Print the fixed Boruta results
print(boruta_adt)
# Plot the Boruta results
plot(boruta_adt, las = 2, cex.axis = 0.7) # cex.axis is used to reduce the font size
# Get the names of the confirmed markers
confirmed_markers <- names(boruta_adt$finalDecision)[grep(TRUE,boruta_adt$finalDecision == 'Confirmed')]
# Calculate the column means of the importance history for the confirmed markers
colMeans(boruta_adt$ImpHistory[,confirmed_markers])
# Filter the training and test datasets based on the confirmed markers
train_dataset_filtered <- train_dataset[,c(confirmed_markers,'RF_Cluster')]
test_dataset_filtered <- test_dataset[,c(confirmed_markers,'RF_Cluster')]
# Set a seed for reproducibility
set.seed(123)
# Define the control parameters for the RF model
fitControl <- trainControl(method = "repeatedcv",
number = 12,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
# Set a seed for reproducibility
set.seed(123)
# Train the RF model
model_filtered = train(RF_Cluster ~ ., data = train_dataset_filtered,
method = "rf",
metric = "ROC",
trControl = fitControl,
tuneLength=10)
# Print the RF model
model_filtered
# Get the variable importance from the RF model
varImp(model_filtered)
# Set a seed for reproducibility
set.seed(123)
# Predict the test dataset using the RF model
fitted_filtered <- predict(model_filtered, test_dataset, type = "prob")
# Convert the predicted probabilities to factor levels
fitted_filtered_factor <- factor(ifelse(fitted_filtered$C2 >= 0.60, "C2", "C1"))
Immunophenotype_percentage <- read.csv(paste(data_folder, '/Immunophenotype/CHR_BP_CMML_immunophenotype_percentage_positive.csv',
sep = ''), row.names = 'Patient.ID')
Immunophenotype_percentage <- Immunophenotype_percentage[rownames(RF_cluster_metadata),]
# Select a subset of columns from the metadata
Metadata_subset <- RF_cluster_metadata[,c(1:46,178)]
# Convert several columns to factors
Metadata_subset$ICC.classification <- factor(as.numeric(factor(Metadata_subset$ICC.classification)))
Metadata_subset$Gender <- factor(Metadata_subset$Gender)
Metadata_subset$Subtype.at.CMML <- factor(Metadata_subset$Subtype.at.CMML)
Metadata_subset$Cutaneous.BPDCN <- factor(Metadata_subset$Cutaneous.BPDCN)
Metadata_subset$RF_Cluster <- factor(Metadata_subset$RF_Cluster)
Metadata_subset$Cytogenetics..at.transformation. <- factor(as.numeric(factor(Metadata_subset$Cytogenetics..at.transformation.)))
# Add the rounded Immunophenotype_percentage to the metadata
Metadata_subset <- cbind(Metadata_subset, round(Immunophenotype_percentage))
# Set a seed for reproducibility
set.seed(123)
# Create a partition for the data
parts = createDataPartition(Metadata_subset$RF_Cluster, p = .7, list = F)
# Split the data into a training set and a test set
train_dataset = Metadata_subset[parts, ]
test_dataset = Metadata_subset[-parts, ]
# Set a seed for reproducibility
set.seed(123)
# Filter the training and test datasets based on selected features
train_dataset_filtered <- train_dataset[,c('CD34','CD56','CD117','BM.Flow.percentage','RF_Cluster')]
test_dataset_filtered <- test_dataset[,c('CD34','CD56','CD117','BM.Flow.percentage','RF_Cluster')]
# Rename the columns of the filtered datasets
colnames(train_dataset_filtered) <- c('Percent.CD34.pos', 'Percent.CD56.pos', 'Percent.CD117.pos', 'Percent.Blast.BM.Flow','RF_Cluster')
colnames(test_dataset_filtered) <- c('Percent.CD34.pos', 'Percent.CD56.pos', 'Percent.CD117.pos', 'Percent.Blast.BM.Flow','RF_Cluster')
# Set a seed for reproducibility
set.seed(123)
# Train the decision tree model
treeModel <- rpart::rpart(RF_Cluster ~ ., data = train_dataset_filtered,
control = rpart::rpart.control(minsplit = 3, minbucket = 1, maxdepth = 4,xval = 10,
cp = 0))
# Print the complexity parameter table of the decision tree model
rpart::printcp(treeModel)
# Prune the decision tree model
fit9 <- rpart::prune(treeModel, cp = 0.02)
# Predict the test dataset using the decision tree model
fitted <- as.data.frame(predict(treeModel, test_dataset_filtered, type = "prob"))
fitted$Identity <- NA
# Convert the predicted probabilities to factor levels
for (patient in rownames(fitted)) {
if ((fitted[patient,'C1'] > fitted[patient,'C2']) == TRUE) {
fitted[patient,'Identity'] <- 'C1'
} else {
fitted[patient,'Identity'] <- 'C2'
}
}
# Convert the Identity column to a factor
fitted$Identity <- factor(fitted$Identity, levels = c('C1','C2'))
# Print the confusion matrix
confusionMatrix(data = fitted$Identity,
reference = test_dataset$RF_Cluster,
mode = "everything")
# Plot the decision tree
rpart.plot::rpart.plot(treeModel, extra = 2)
# Save the plot to a PNG file
png(filename = paste(figures_folder, '/Fig_07/Panel_F.png', sep = ''), units = "cm", width = 18, height = 12, res = 300)
rpart.plot::rpart.plot(treeModel, extra = 2)
invisible(dev.off())
# # We also saved a high dpi copy to be used to assemble a high resolution composite figure for the manuscript (render not included in GitHub repo due to size restriction)
# pdf(file = paste(figures_folder, '/Fig_07/Panel_F.pdf', sep = ''),
#     width = 7.08661, height = 4.72441)
# rpart.plot::rpart.plot(treeModel, extra = 2)
# invisible(dev.off())
# Get the true labels from the test dataset
labels <- test_dataset$RF_Cluster
# Get the predicted probabilities for class C1
predictions <- fitted$C1
# Create a prediction object using the ROCR package
ROCR_pred <- prediction(predictions, labels, label.ordering = c('C2','C1'))
# Print the prediction object
ROCR_pred
# Create a performance object using the ROCR package
ROCR_perf <- performance(ROCR_pred, 'tpr', 'fpr')
# Plot the ROC curve using the ROCR package
plot(ROCR_perf, avg = "threshold", colorize = TRUE)
abline(0, 1, lty = 2)
# Create a ROC curve using the pROC package
pROC_pred <- roc(response = labels, predictor = predictions)
# Plot the ROC curve using the pROC package
plot.roc(pROC_pred, main="pROC")

"FLT3",
"NPM1",
"CEBPA",
"WT1",
"KIT",
"BRAF",
"KRAS",
"NRAS",
"CBL",
"PTPN11",
"GATA2",
"SH2B3",
"ZRSR2",
"CSF3R",
"DTA.mutations__DNMT3A_TET2_ASXL1",
"Splicing.mutations__SRSF2_SF3B1_U2AF1_ZRSF2",
"RAS.mutations__NRAS_KRAS_CBL_NF1_PTPN11_BRAF",
"IDH.mutations__IDH1_IDH2")
### Gene Expression Correlation with Sample Traits
# Calculate gene expression correlation with the samples traits
gene_trait_significance_complete <- cor(model_matrix_complete, WGCNA_Input_ExpMat_filtered, use = "p") %>% t() %>% as.data.frame()
# Turn module labels into colors
moduleColors = labels2colors(cut)
# Turn correlation valus to colors
gene_significance_colors_complete <- lapply(gene_trait_significance_complete, numbers2colors, signed=TRUE) %>% as.data.frame()
colnames(gene_significance_colors_complete) <- colnames(gene_trait_significance_complete)
# Unmerged Module Colors
gene_significance_colors_complete_unmerged <- cbind(moduleColors, gene_significance_colors_complete)
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/Hierarchical_plot_filtered_genes.png', width = 4.99*7, height = 4.88*3, units = 'cm', res = 300)
### Network Modules and Gene Correlation to Sample Traits
plotDendroAndColors(
dendr,
gene_significance_colors_complete_unmerged,
groupLabels = c("Module color", colnames(model_matrix_complete)),
dendroLabels = FALSE,
hang = 0.01,
las = 2,
cex.axis = 0.7,
addGuide = TRUE,
guideHang = 0.05,
cex.main = 0.8,
cex.colorLabels = 0.4,
main = ""
)
#dev.off()
MEList <- moduleEigengenes(WGCNA_Input_ExpMat_filtered, colors=moduleColors)
MEs <- MEList$eigengenes
# Order module eigengenes
MEs = orderMEs(MEs)
### Module Eigengene Intercorrelations
# Evaluate modules inter correlations for possibility of merging too similar modules
# Plot the relationships among the eigengenes as well as its adjacency heatmap
par(cex = 0.9)
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_correlation_plot.png', width = 4.99*3, height = 4.88*3, units = 'cm', res = 300)
plotEigengeneNetworks(MEs,
"",
marDendro = c(1, 4, 1, 6),
marHeatmap = c(3, 4, 1, 2),
cex.lab = 0.8,
xLabelsAngle = 90
)
#dev.off()
NewMEs <- mergeCloseModules(exprData = WGCNA_Input_ExpMat_filtered,
colors = moduleColors,
MEs = MEs)
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_correlation_plot_postMEmerging.png', width = 4.99*3, height = 4.88*3, units = 'cm', res = 300)
plotEigengeneNetworks(NewMEs$newMEs,
"",
marDendro = c(1, 4, 1, 6),
marHeatmap = c(3, 4, 1, 2),
cex.lab = 0.8,
xLabelsAngle = 90
)
#dev.off()
### Traits binary matrix
model_matrix_short <- model_matrix_complete[,c('Condition_Control', 'Condition_BP-CMML')]
colnames(model_matrix_short) <- c('Control','BP-CMML')
# Calculate gene expression correlation with the samples traits
gene_trait_significance_short <- cor(model_matrix_short, WGCNA_Input_ExpMat_filtered, use = "p") %>% t() %>% as.data.frame()
# Merged Module Colors
NewModuleColors = NewMEs$colors
# Changing the colors to look better
NewModuleColors[grep(TRUE,NewModuleColors == 'yellow')] <- 'mediumpurple2'
NewModuleColors[grep(TRUE,NewModuleColors == 'green')] <- 'darkgoldenrod1'
NewModuleColors[grep(TRUE,NewModuleColors == 'red')] <- 'firebrick2'
NewModuleColors[grep(TRUE,NewModuleColors == 'brown')] <- 'palegreen2'
NewModuleColors[grep(TRUE,NewModuleColors == 'black')] <- 'mediumturquoise'
NewModuleColors[grep(TRUE,NewModuleColors == 'blue')] <- 'royalblue2'
# Turn correlation valus to colors
gene_significance_colors_short <- lapply(gene_trait_significance_short, numbers2colors, signed=TRUE) %>% as.data.frame()
colnames(gene_significance_colors_short) <- colnames(gene_trait_significance_short)
# Unmerged Module Colors
gene_significance_colors_short_merged <- cbind(NewModuleColors, gene_significance_colors_short)
### Traits binary matrix complete
model_matrix_complete <- as.data.frame(model.matrix( ~ Condition + ICC.classification + WHO.classification + Cutaneous.BPDCN + DNMT3A + TET2 + SRSF2 + SF3B1 + SETBP1 + U2AF1 + IDH1 + IDH2 + ASXL1 + EZH2 + STAG2 + BCOR + TP53 + PHF6 + NF1 + RUNX1 + FLT3 + NPM1 + CEBPA + WT1 + KIT + BRAF + KRAS + NRAS + CBL + PTPN11 + GATA2 + SH2B3 + ZRSR2 + CSF3R + DTA.mutations..DNMT3A..TET2..ASXL1. +Splicing.mutations..U2...SRSF2..SF3B1..U2AF1..ZRSF2. +RAS.mutations..NRAS..KRAS..CBL..NF1..PTPN11..BRAF. + IDH.mutations..IDH1..IDH2. - 1 , data = Samples_metadata))
model_matrix_complete <- model_matrix_complete %>% tibble::add_column('ICC.classificationAML not otherwise specified' = as.numeric(Samples_metadata$ICC.classification == 'AML not otherwise specified'), .before = 'ICC.classificationBPDCN')
model_matrix_complete <- model_matrix_complete %>% tibble::add_column('WHO.classificationAML myelodysplasia-related' = as.numeric(Samples_metadata$WHO.classification == 'AML myelodysplasia-related'), .before = 'WHO.classificationAML with CEBPA')
model_matrix_complete$ICC.classificationControl <- NULL
model_matrix_complete$ICC.classificationBPDCN <- NULL
model_matrix_complete$WHO.classificationControl <- NULL
colnames(model_matrix_complete) <- c("Condition_BP-CMML", "Condition_Control",
"ICC.Classification__AML_with_CEBPA",
"ICC.Classification__AML_with_MDS-related_cytogenetic_abnormalities",
"ICC.Classification__AML_with_MDS-related_gene_mutations",
"ICC.Classification__AML_with_NPM1",
"ICC.Classification__AML_not_otherwise_specified",
"WHO.Classification__AML_myelodysplasia-related",
"WHO.Classification__AML_with_CEBPA",
"WHO.Classification__AML_with_NPM1",
"WHO.Classification__AML_with_other_defined_genetic_alterations",
"BPDCN",
"Cutaneous.BPDCN",
"DNMT3A",
"TET2",
"SRSF2",
"SF3B1",
"SETBP1",
"U2AF1",
"IDH1",
"IDH2",
"ASXL1",
"EZH2",
"STAG2",
"BCOR",
"TP53",
"PHF6",
"NF1",
"RUNX1",
"FLT3",
"NPM1",
"CEBPA",
"WT1",
"KIT",
"BRAF",
"KRAS",
"NRAS",
"CBL",
"PTPN11",
"GATA2",
"SH2B3",
"ZRSR2",
"CSF3R",
"DTA.mutations__DNMT3A_TET2_ASXL1",
"Splicing.mutations__SRSF2_SF3B1_U2AF1_ZRSF2",
"RAS.mutations__NRAS_KRAS_CBL_NF1_PTPN11_BRAF",
"IDH.mutations__IDH1_IDH2")
### Gene Expression Correlation with Sample Traits
# Calculate gene expression correlation with the samples traits
gene_trait_significance_complete <- cor(model_matrix_complete, WGCNA_Input_ExpMat_filtered, use = "p") %>% t() %>% as.data.frame()
# Merged Module Colors
NewModuleColors = NewMEs$colors
# Changing the colors to look better
NewModuleColors[grep(TRUE,NewModuleColors == 'yellow')] <- 'mediumpurple2'
NewModuleColors[grep(TRUE,NewModuleColors == 'green')] <- 'darkgoldenrod1'
NewModuleColors[grep(TRUE,NewModuleColors == 'red')] <- 'firebrick2'
NewModuleColors[grep(TRUE,NewModuleColors == 'brown')] <- 'palegreen2'
NewModuleColors[grep(TRUE,NewModuleColors == 'black')] <- 'mediumturquoise'
NewModuleColors[grep(TRUE,NewModuleColors == 'blue')] <- 'royalblue2'
# Turn correlation valus to colors
gene_significance_colors_complete <- lapply(gene_trait_significance_complete, numbers2colors, signed=TRUE) %>% as.data.frame()
colnames(gene_significance_colors_complete) <- colnames(gene_trait_significance_complete)
# Unmerged Module Colors
gene_significance_colors_complete_merged <- cbind(NewModuleColors, gene_significance_colors_complete)
disssim_signed <- 1 - distM_signed_filtered
diag(disssim_signed) = NA
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/TOM_plot_postMEmerging.png', width = 4.99*2, height = 4.88*2, units = 'cm', res = 300)
#TOMplot(dissim = log2(disssim_signed),
#        dendro = dendr,
#        Colors = as.character(NewModuleColors),
#        main = "Topological Overlap Matrix",
#        col=RColorBrewer::brewer.pal(n = 9, 'YlOrRd'))
#dev.off()
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/Hierarchical_plot_filtered_genes_MEmerged.png', width = 4.99*7, height = 4.88*3, units = 'cm', res = 300)
plotDendroAndColors(
dendr,
gene_significance_colors_complete_merged,
groupLabels = c("Module color", colnames(model_matrix_complete)),
dendroLabels = FALSE,
hang = 0.01,
las = 2,
cex.axis = 0.7,
addGuide = TRUE,
guideHang = 0.05,
cex.main = 0.8,
cex.colorLabels = 0.4,
main = ""
)
#dev.off()
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/Hierarchical_plot_filtered_genes_MEmerged_short.png', width = 4.99*7, height = 4.88*3, units = 'cm', res = 300)
plotDendroAndColors(
dendr,
gene_significance_colors_short_merged,
groupLabels = c("Module color", colnames(model_matrix_short)),
dendroLabels = FALSE,
hang = 0.01,
las = 2,
cex.axis = 0.9,
addGuide = TRUE,
guideHang = 0.05,
cex.main = 0.8,
cex.colorLabels = 1,
main = "", colorHeightMax = 0.01
)
#dev.off()
MEs <- NewMEs$newMEs
colnames(MEs) <- c('ME1','ME2','ME3','ME6','ME4','ME5')
MEs <- MEs[,c('ME1','ME2','ME3','ME6','ME4','ME5')]
traitMECor <- WGCNA::cor(MEs, model_matrix_complete, use = "p")
traitMEPval <- WGCNA::corPvalueStudent(traitMECor, nrow(WGCNA_Input_ExpMat_filtered))
traitMECor <- traitMECor[,c(2,1,3:47)]
traitMEPval <- traitMEPval[,c(2,1,3:47)]
colnames(traitMECor) <- paste('MECor',colnames(traitMECor), sep = '_')
colnames(traitMEPval) <- paste('MEstats',colnames(traitMEPval), sep = '_')
traitMEstats <- as.data.frame(cbind(traitMECor, traitMEPval))
traitMEstats$Rank_Control <- sign(traitMEstats$MECor_Condition_Control)*(-1*log10(traitMEstats$MEstats_Condition_Control))
traitMEstats$Rank_Blast_phase <- sign(traitMEstats$`MECor_Condition_BP-CMML`)*(-1*log10(traitMEstats$`MEstats_Condition_BP-CMML`))
#write.csv(traitMEstats, '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_Traits_Cor.csv', quote = F, sep = ',', row.names = T)
ME_color_number_df <- data.frame(row.names = 1:6)
ME_color_number_df$number <- c('ME6','ME5','ME4','ME3','ME2','ME1')
ME_color_number_df$colour <- NULL
ME_color_annotation <-  list(number = c('ME6' = 'mediumpurple2',
'ME5' = 'firebrick2',
'ME4' = 'darkgoldenrod1',
'ME3' = 'palegreen2',
'ME2' = 'mediumturquoise',
'ME1' = 'royalblue2'))
breaks_val <- seq(from = -0.4, to = 0.4, length.out = 13)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(brew_mix))
traitMECor_Renamed <- traitMECor[,c(1:7, 12, 14:47)]
traitMEPval_Renamed <- traitMEPval[,c(1:7, 12, 14:47)]
colnames(traitMECor_Renamed) <- str_remove_all(colnames(traitMECor_Renamed), 'MECor_')
colnames(traitMEPval_Renamed) <- str_remove_all(colnames(traitMEPval_Renamed), 'MEstats_')
colnames(traitMECor_Renamed)[1:8] <- c('Control',
'BP-CMML',
'AML: CEBPA',
'AML: MDS-cyto',
'AML: MDS-mut',
'AML: NPM1',
'AML: NOS',
'BPDCN')
colnames(traitMECor_Renamed)[39:42] <- c('DTA group',
'Splicing group',
'RAS group',
'IDH group')
colnames(traitMEPval_Renamed)[1:8] <- c('Control',
'BP-CMML',
'AML: CEBPA',
'AML: MDS-cyto',
'AML: MDS-mut',
'AML: NPM1',
'AML: NOS',
'BPDCN')
colnames(traitMEPval_Renamed)[39:42] <- c('DTA group',
'Splicing group',
'RAS group',
'IDH group')
metadata_df <- data.frame(row.names = colnames(traitMECor_Renamed))
metadata_df$Metadata <- colnames(traitMECor_Renamed)
metadata_df$Class <- 'Mutation'
metadata_df[1:2,'Class'] <- 'Condition'
metadata_df[3:8,'Class'] <- 'ICC'
metadata_df[39:42,'Class'] <- 'Grouped Mutations'
metadata_df$Class <- factor(metadata_df$Class, levels = c('Condition',
'ICC',
'Grouped Mutations',
'Mutation'))
ra <- rowAnnotation(df=ME_color_number_df, col = ME_color_annotation,
gp = gpar(lwd =0.5, col = 'black'),
simple_anno_size = unit(2, 'mm'),
show_annotation_name = F, show_legend = FALSE,
annotation_legend_param = list(number = list(direction = "horizontal")))
traitMECor_Renamed <- traitMECor_Renamed[c('ME6','ME5','ME4',
'ME3','ME2','ME1'),]
traitMEPval_Renamed <- traitMEPval_Renamed[c('ME6','ME5','ME4',
'ME3','ME2','ME1'),]
ht_opt$COLUMN_ANNO_PADDING = unit(4, "mm")
ht_opt$ROW_ANNO_PADDING = unit(2.5, "mm")
###
Heatmap_trait_cor <- Heatmap(traitMECor_Renamed, name = 'Pearson\nCor.',
col = col_heatmap_guide,
cell_fun = function(j, i, x, y, w, h, fill) {
if(traitMEPval_Renamed[i, j] < 0.001) {
grid.text("*", x, y, vjust = 0.65, gp = gpar(fontsize = 18))
} else if(traitMEPval_Renamed[i, j] < 0.05) {
grid.text("•", x, y, vjust = 0.2, gp = gpar(fontsize = 13))
}},
left_annotation = ra,
show_row_names = TRUE,
show_column_names = TRUE,
cluster_columns = F,
cluster_rows = F,
border = TRUE,
column_split = metadata_df$Class,
column_gap = unit(c(2.5,2.5,2.5), "mm"),
cluster_row_slices = F,
cluster_column_slices = F,
row_gap = unit(0.05, 'cm'),
show_row_dend = FALSE,
row_names_side = 'left',
column_names_side = 'bottom',
use_raster = TRUE,
rect_gp = gpar(col = "black", lwd = 0.05),
raster_by_magick = TRUE,
column_title_gp = gpar(fontsize = 0, angle=45),
column_names_gp = gpar(fontsize = 9, hjust=0),
row_title_gp = gpar(fontsize = 0),
row_names_gp = gpar(fontsize = 9, hjust=0),
show_heatmap_legend = T,
heatmap_legend_param = list(
legend_direction = "horizontal",
legend_width = unit(3, "cm")))
#Heatmap_trait_cor
#png(filename = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_Trait_heatmap_wLegend.png', width = 11*2, height = 4 *2, units = 'cm', res = 300)
draw(Heatmap_trait_cor, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
#dev.off()
### Gene Expression Heatmaps and Module Eigengene Barplots
ME_color_annotation <-  list('ME6' = 'mediumpurple2',
'ME5' = 'firebrick2',
'ME4' = 'darkgoldenrod1',
'ME3' = 'palegreen2',
'ME2' = 'mediumturquoise',
'ME1' = 'royalblue2')
for (i in 1:ncol(MEs)){
par(mfrow=c(2,1), mar=c(1.5, 6, 3.5, 1.7))
which.module=colnames(MEs)[i]
#png(filename = sprintf('/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_distribution_%s.png',which.module), width = 4.99*2, height = 4.88*2, units = 'cm', res = 300)
WGCNA::plotMat(
t(scale(t(Expression_matrix_Filtered[NewModuleColors == ME_color_annotation[[which.module]], ]))),
nrgcols = 30,
rlabels = T,
clabels = F,
rcols = ME_color_annotation[[which.module]],
title = ""
)
title(main = list(paste0(which.module, " (", sum(NewModuleColors == ME_color_annotation[[which.module]]), " genes)"), cex = 2), line = 2)
for (n in 1:ncol(Expression_matrix_Filtered)) {
axis(
side = 3,
at = n,
labels = colnames(Expression_matrix_Filtered)[n],
cex.axis = 0.6,
las = 3
)
}
par(mar=c(4, 4, 0, 0))
barplot(
MEs[, which.module],
col = ME_color_annotation[[which.module]],
main = "",
cex.main = 2,
ylab = "eigengene expression",
xlab = "Sample",
cex.axis = 0.7,
cex.lab = 1,
mgp=c(2,1,0),
las = 2
)
#dev.off()
}
#write.csv(x = MEs, file = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_Samples_expression.csv', quote = F, row.names = T)
rescale01 <- function(x){(x-min(x))/(max(x)-min(x))}
ME_distributions <- data.frame(row.names = 1:length(rep(rownames(MEs),6)))
ME_distributions$Sample <- rep(rownames(MEs),6)
ME_distributions$Condition <- rep(Samples_metadata$Condition,6)
ME_distributions$Module <- c(rep('ME1',49),
rep('ME2',49),
rep('ME3',49),
rep('ME6',49),
rep('ME5',49),
rep('ME4',49))
ME_distributions$ScaledExpression <- c(rescale01(MEs$ME1),
rescale01(MEs$ME2),
rescale01(MEs$ME3),
rescale01(MEs$ME6),
rescale01(MEs$ME5),
rescale01(MEs$ME4))
ME_distributions$Condition <- factor(ME_distributions$Condition, levels=c('Control', 'BP-CMML'))
ME_distributions$Module <- factor(ME_distributions$Module, levels=c('ME1', 'ME2', 'ME3',
'ME4', 'ME5', 'ME6'))
#write.csv(x = ME_distributions_no_healthies, file = '/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_distributions_scaled_no_healthies.csv', row.names = F, quote = F)
#png(filename = sprintf('/Users/kristiangurashi/Dropbox (The University of Manchester)/Projects data/Project__Christie_BP_CMML_Stratification_and_Drug_Prediction/04__Christie_BP_CMML_BulkRNAseq/03__GRN_Analyses/WGCNA/Results/ME_distributions.png',which.module), width = 5.09*1.25, height = 12.74*1.5, units = 'cm', res = 300)
ggplot(ME_distributions,
aes(x = ScaledExpression, y = Module,
color = Condition,
point_color = Condition, fill = Condition)) +
geom_density_ridges(
jittered_points = TRUE, scale = .95, rel_min_height = .01,
point_shape = "|", point_size = 3,
position = position_points_jitter(height = 0)
) +
scale_fill_manual(values = c(ggplot2::alpha("#A4BECE", 0.75),
ggplot2::alpha("#DD3429",0.75)),
labels = c("Control", "BP-CMML")) +
scale_color_manual(values = c("#A4BECE", "#DD3429"), guide = "none") +
scale_discrete_manual("point_color", values = c("#A4BECE", "#DD3429"), guide = "none") +
coord_cartesian(clip = "off") +
guides(fill = guide_legend(
override.aes = list(
fill = c("#A4BECE", "#DD3429"),
color = NA, point_color = NA)
)
) +
ggtitle("") + ylab("") +
theme_ridges(center = TRUE) + theme_minimal() +
theme(axis.title.x = element_text(face='bold', size=10),
legend.position = 'bottom',
legend.title = element_text(face='bold', size=12)) + guides(fill =
guide_legend(title = 'Condition',
title.position = "top",title.hjust = 0.5))
# dev.off()
genes_to_module_df <- data.frame(row.names = colnames(WGCNA_Input_ExpMat_filtered))
genes_to_module_df$Module <- 'NA'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME1']]]),'Module'] <- 'ME1'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME2']]]),'Module'] <- 'ME2'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME3']]]),'Module'] <- 'ME3'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME4']]]),'Module'] <- 'ME4'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME5']]]),'Module'] <- 'ME5'
genes_to_module_df[colnames(WGCNA_Input_ExpMat_filtered[,NewModuleColors == ME_color_annotation[['ME6']]]),'Module'] <- 'ME6'
genes_to_module_df <- genes_to_module_df %>% arrange(Module)
write.csv(x = genes_to_module_df, file = paste(data_folder, '/RNASeq/WGCNA/ME_Gene_Assignment.csv', sep = ''),
row.names = T)
### Intramodular Analysis
nSamples <- ncol(Expression_matrix_Filtered)
modNames = names(MEs)
# GeneModule membership
geneModuleMembership <- as.data.frame(cor(x = WGCNA_Input_ExpMat_filtered, y = MEs, use = "p"))
MMPvalue = as.data.frame(WGCNA::corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("", modNames, sep="")
names(MMPvalue) = paste("p.", modNames, sep="");
Module_Membership_df <- cbind(geneModuleMembership, MMPvalue)
write.csv(Module_Membership_df, paste(data_folder, '/RNASeq/WGCNA/ME_Gene_Membership.csv', sep = ''),
quote = F, row.names = T)
MEs <- read.csv(paste(data_folder, '/RNASeq/WGCNA/ME_Gene_Membership.csv', sep = ''), row.names = 'X')
MEs_assigned_genes <- read.csv(paste(data_folder, '/RNASeq/WGCNA/ME_Gene_Assignment.csv', sep = ''))
Module_genes_list <- list()
Module_genes_list[['ME1']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME1'),'X']
Module_genes_list[['ME2']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME2'),'X']
Module_genes_list[['ME3']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME3'),'X']
Module_genes_list[['ME4']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME4'),'X']
Module_genes_list[['ME5']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME5'),'X']
Module_genes_list[['ME6']] <- MEs_assigned_genes[grep(TRUE,MEs_assigned_genes$Module == 'ME6'),'X']
ME1_genes <- MEs
ME1_genes <- ME1_genes %>% arrange(-ME1) %>% filter(p.ME1 < 0.05)
ME2_genes <- MEs
ME2_genes <- ME2_genes %>% arrange(-ME2) %>% filter(p.ME2 < 0.05)
ME3_genes <- MEs
ME3_genes <- ME3_genes %>% arrange(-ME3) %>% filter(p.ME3 < 0.05)
ME4_genes <- MEs
ME4_genes <- ME4_genes %>% arrange(-ME4) %>% filter(p.ME4 < 0.05)
ME5_genes <- MEs
ME5_genes <- ME5_genes %>% arrange(-ME5) %>% filter(p.ME5 < 0.05)
ME6_genes <- MEs
ME6_genes <- ME6_genes %>% arrange(-ME6) %>% filter(p.ME6 < 0.05)
Top_30percent_ME1_genes <- ME1_genes[grep(TRUE,percent_rank(ME1_genes$ME1) > 0.70),]
Top_30percent_ME2_genes <- ME2_genes[grep(TRUE,percent_rank(ME2_genes$ME2) > 0.70),]
Top_30percent_ME3_genes <- ME3_genes[grep(TRUE,percent_rank(ME3_genes$ME3) > 0.70),]
Top_30percent_ME4_genes <- ME4_genes[grep(TRUE,percent_rank(ME4_genes$ME4) > 0.70),]
Top_30percent_ME5_genes <- ME5_genes[grep(TRUE,percent_rank(ME5_genes$ME5) > 0.70),]
Top_30percent_ME6_genes <- ME6_genes[grep(TRUE,percent_rank(ME6_genes$ME6) > 0.70),]
Top_30percent_Module_genes_list <- list()
Top_30percent_Module_genes_list[['ME1']] <- rownames(Top_30percent_ME1_genes)
Top_30percent_Module_genes_list[['ME2']] <- rownames(Top_30percent_ME2_genes)
Top_30percent_Module_genes_list[['ME3']] <- rownames(Top_30percent_ME3_genes)
Top_30percent_Module_genes_list[['ME4']] <- rownames(Top_30percent_ME4_genes)
Top_30percent_Module_genes_list[['ME5']] <- rownames(Top_30percent_ME5_genes)
Top_30percent_Module_genes_list[['ME6']] <- rownames(Top_30percent_ME6_genes)
write.list(Top_30percent_Module_genes_list,
file = paste(data_folder, '/RNASeq/WGCNA/WGCNA_Modules_Top30_percent_genes.csv', sep = ''))
Module_genes_list_added <- Module_genes_list
Module_genes_list_added[['ME1']] <- unique(c(Module_genes_list[['ME1']], Top_30percent_Module_genes_list[['ME1']]))
Module_genes_list_added[['ME2']] <- unique(c(Module_genes_list[['ME2']], Top_30percent_Module_genes_list[['ME2']]))
Module_genes_list_added[['ME3']] <- unique(c(Module_genes_list[['ME3']], Top_30percent_Module_genes_list[['ME3']]))
Module_genes_list_added[['ME4']] <- unique(c(Module_genes_list[['ME4']], Top_30percent_Module_genes_list[['ME4']]))
Module_genes_list_added[['ME5']] <- unique(c(Module_genes_list[['ME5']], Top_30percent_Module_genes_list[['ME5']]))
Module_genes_list_added[['ME6']] <- unique(c(Module_genes_list[['ME6']], Top_30percent_Module_genes_list[['ME6']]))
Genie3_weights <- readRDS(paste(data_folder, '/RNASeq/Genie3/Genie3_Weights.rds', sep = ''))
linkList <- readRDS(paste(data_folder, '/RNASeq/Genie3/Genie3_Linklist.rds', sep = ''))
tf_weights <- paste(data_folder, '/RNASeq/WGCNA/WGCNA_Modules_Genie3_TF_regulator_per_module.csv', sep = '')
if (file.exists(tf_weights)) {
tf_weights <- read.csv(tf_weights, header = T, row.names = 'X')
} else {
tf_weights <- data.frame(row.names = sort(levels(factor(linkList$regulatoryGene))))
# Create a progress bar
pb <- txtProgressBar(min = 0, max = length(rownames(tf_weights)), style = 3)
for (index in 1:length(rownames(tf_weights))) {
TF <- rownames(tf_weights)[index]
# Update the progress bar
setTxtProgressBar(pb, index)
tf_weights[TF,'ME1_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME1']]))$weight)
tf_weights[TF,'ME2_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME2']]))$weight)
tf_weights[TF,'ME3_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME3']]))$weight)
tf_weights[TF,'ME4_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME4']]))$weight)
tf_weights[TF,'ME5_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME5']]))$weight)
tf_weights[TF,'ME6_weight'] <- median(((linkList %>% filter(regulatoryGene == TF)) %>% filter(targetGene %in% Module_genes_list[['ME6']]))$weight)
}
# Close the progress bar
close(pb)
tf_weights <- tf_weights %>% arrange(-ME1_weight)
tf_weights$ME1_rank <- 1:length(rownames(tf_weights))
tf_weights <- tf_weights %>% arrange(-ME2_weight)
tf_weights$ME2_rank <- 1:length(rownames(tf_weights))
tf_weights <- tf_weights %>% arrange(-ME3_weight)
tf_weights$ME3_rank <- 1:length(rownames(tf_weights))
tf_weights <- tf_weights %>% arrange(-ME4_weight)
tf_weights$ME4_rank <- 1:length(rownames(tf_weights))
tf_weights <- tf_weights %>% arrange(-ME5_weight)
tf_weights$ME5_rank <- 1:length(rownames(tf_weights))
tf_weights <- tf_weights %>% arrange(-ME6_weight)
tf_weights$ME6_rank <- 1:length(rownames(tf_weights))
write.csv(x = tf_weights, file = paste(data_folder, '/RNASeq/WGCNA/WGCNA_Modules_Genie3_TF_regulator_per_module.csv', sep = ''), quote = F, row.names = T)
}

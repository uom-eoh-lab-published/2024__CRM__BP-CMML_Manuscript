`Treatment response` = list(direction = "vertical"),
`Upfront HMA` = list(direction = "horizontal"),
`Gender` = list(direction = "horizontal")
)
)
# Set the padding for the column annotations to 0.4 cm
ht_opt$COLUMN_ANNO_PADDING = unit(0.4, "cm")
# Set the padding for the row annotations to 0.4 cm
ht_opt$ROW_ANNO_PADDING = unit(0.4, "cm")
# Create an oncoprint
oncoPrint_with_legend <- oncoPrint(t(Mutation_metadata),
alter_fun = alter_fun,
alter_fun_is_vectorized = FALSE,
col = col,
remove_empty_columns = TRUE,
remove_empty_rows = TRUE,
pct_side = "right", border = FALSE,
row_names_side = "left",
top_annotation = ha,
pct_gp = gpar(fontsize = 12, fontfamily = 'sans'),
row_names_gp = gpar(fontsize = 12, fontfamily = 'sans'),
right_annotation =  rowAnnotation(rbar = anno_oncoprint_barplot()),
left_annotation = NULL, show_heatmap_legend = TRUE,
bottom_annotation =  columnAnnotation(botbar = anno_oncoprint_barplot(axis_param = list(direction = "reverse"))),
column_title = column_title)
# Open a new PNG device for plotting
png(filename = paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''), units = 'cm', width = 35, height = 22, res = 300)
# Draw the oncoprint on the current plotting device
draw(oncoPrint_with_legend, heatmap_legend_side = "right", annotation_legend_side = "right")
# Add text to the "rbar" annotation
decorate_annotation("rbar", {
grid.text("Number of\nmutations\nin cohort", x = unit(10, "mm"), y = unit(165, "mm"), rot = 0, just = "bottom")
})
# Add text to the "botbar" annotation
decorate_annotation("botbar", {
grid.text("Number of\nmutations\nin patient", x = unit(-9, "mm"), y = unit(10, "mm"), rot = 90, just = "bottom")
})
# Close the current plotting device
dev.off()
# Display the oncoprint
readPNG(paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''))
# Display the oncoprint
png::readPNG(paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''))
png::readPNG
png::readPNG(source = )
# Display the oncoprint
png::readPNG(source = paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''))
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data/Figure_01'
output_folder <- './Figures/Figure_01'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Define a list of required packages used in this script
packages_required <- c("ComplexHeatmap", "stringr",
"unikn", "RColorBrewer", "yarrr",
"scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
# Load stringr for string manipulation
library(stringr, quietly = TRUE)
# Load ComplexHeatmap for creating complex heatmaps
library(ComplexHeatmap, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Write the session information to a text file
writeLines(capture.output(sessionInfo()), file.path(script_folder, 'Panel_A_SessionInfo.txt'))
# Print the session information
sessionInfo()
Clinical_metadata <- read.csv(paste(data_folder, '/CHR_BP-CMML_clinical_metadata.csv', sep = ''), row.names = 'Patient.ID')
Mutation_metadata <- read.csv(paste(data_folder, '/CHR_BP-CMML_mutation_metadata.csv', sep = ''), row.names = 'Patient.ID')
# Loop over all columns in Mutation_metadata
for (colname in colnames(Mutation_metadata)) {
# Convert the column to character
Mutation_metadata[,colname] <- as.character(Mutation_metadata[,colname])
# Replace '1' with 'MUT'
Mutation_metadata[,colname] <- str_replace_all(Mutation_metadata[,colname], pattern = '1', replacement = 'MUT')
# Replace '0' with ''
Mutation_metadata[,colname] <- str_replace_all(Mutation_metadata[,colname], pattern = '0', replacement = '')
}
# Define a color mapping
col = c("MUT" = "grey25")
# Define a list of functions for drawing rectangles
alter_fun = list(
# Function for drawing a light grey rectangle
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = "grey93", col = NA))
},
# Function for drawing a rectangle with the color defined for 'MUT'
MUT = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = col["MUT"], col = NA))
}
)
# Define an empty column title
column_title = ""
# Define parameters for the heatmap legend
heatmap_legend_param = list(title = "Alternations", at = c("MUT"),
labels = c("Mutation"))
# Subset Clinical_metadata to keep only certain columns
Clinical_metadata_selected <- Clinical_metadata[,c('Cutaneous.BPDCN',
'ICC.classification',
'Cytogenetics.CPSS',
'Treatment.response',
'Upfront.HMA',
'Gender')]
# Subset Mutation_metadata to keep only the rows that have the same row names as Clinical_metadata_selected
Mutation_metadata <- Mutation_metadata[rownames(Clinical_metadata_selected),]
# Convert 'Cutaneous.BPDCN' to a factor with levels 'No' and 'Yes'
Clinical_metadata_selected$Cutaneous.BPDCN <- factor(Clinical_metadata_selected$Cutaneous.BPDCN,
levels = c('No', 'Yes'))
# Convert 'ICC.classification' to a factor with specific levels
Clinical_metadata_selected$ICC.classification <- factor(Clinical_metadata_selected$ICC.classification,
levels = c('BPDCN',
'AML not otherwise specified',
'AML with CEBPA',
'AML with NPM1',
'AML with MDS-related gene mutations',
'AML with MDS-related cytogenetic abnormalities'))
# Convert 'Cytogenetics.CPSS' to a factor with levels 'Low risk', 'Intermediate risk', and 'High risk'
Clinical_metadata_selected$Cytogenetics.CPSS <- factor(Clinical_metadata_selected$Cytogenetics.CPSS,
levels = c('Low risk',
'Intermediate risk',
'High risk'))
# Convert 'Treatment.response' to a factor with levels 'CR', 'Refractory', and 'Not evaluable'
Clinical_metadata_selected$Treatment.response <- factor(Clinical_metadata_selected$Treatment.response,
levels = c('CR',
'Refractory',
'Not evaluable'))
# Convert 'Upfront.HMA' to a factor with levels 'No' and 'Yes'
Clinical_metadata_selected$Upfront.HMA <- factor(Clinical_metadata_selected$Upfront.HMA,
levels = c('No',
'Yes'))
# Convert 'Gender' to a factor with levels 'Female' and 'Male'
Clinical_metadata_selected$Gender <- factor(Clinical_metadata_selected$Gender,
levels = c('Female',
'Male'))
# Rename the columns of Clinical_metadata_selected
colnames(Clinical_metadata_selected) <- c('Cutaneous BPDCN',
'ICC classification',
'Cytogenetics (CPSS)',
'Treatment response',
'Upfront HMA',
'Gender')
# Define a list of color mappings for different categories in several variables
colors_top_annotation <-  list(
`Cutaneous BPDCN` = c('Yes' = '#b5179e',
'No' = '#ffd2fc'),
`ICC classification` = c('BPDCN' = '#fff0f3',
'AML not otherwise specified' = '#ffccd5',
'AML with CEBPA' = '#ff8fa3',
'AML with NPM1' = '#ff4d6d',
'AML with MDS-related gene mutations' = '#c9184a',
'AML with MDS-related cytogenetic abnormalities' = '#800f2f'),
`Cytogenetics (CPSS)` = c('Low risk' = '#ffdcc2',
'Intermediate risk' = '#eda268',
'High risk' = '#522500'),
`Treatment response` = c('CR' = '#e9f5db',
'Refractory' = '#c2d5aa',
'Not evaluable' = '#606f49'),
`Upfront HMA` = c('Yes' = '#72bbce',
'No' = '#dceef3'),
Gender = c('Male' = '#e1e5f2',
'Female' = '#bee3db')
)
# Create a heatmap annotation object
ha <- HeatmapAnnotation(
df = Clinical_metadata_selected,
gp = gpar(lwd = 2, col = 'white'),
col = colors_top_annotation,
show_annotation_name = TRUE,
annotation_name_side = "left",
show_legend = TRUE,
annotation_name_gp = gpar(fontsize = 12, fontfamily = 'sans', fontface = 'bold'),
annotation_legend_param = list(
`Cutaneous BPDCN` = list(direction = "horizontal"),
`ICC classification` = list(direction = "vertical"),
`Cytogenetics (CPSS)` = list(direction = "vertical"),
`Treatment response` = list(direction = "vertical"),
`Upfront HMA` = list(direction = "horizontal"),
`Gender` = list(direction = "horizontal")
)
)
# Set the padding for the column annotations to 0.4 cm
ht_opt$COLUMN_ANNO_PADDING = unit(0.4, "cm")
# Set the padding for the row annotations to 0.4 cm
ht_opt$ROW_ANNO_PADDING = unit(0.4, "cm")
# Create an oncoprint
oncoPrint_with_legend <- oncoPrint(t(Mutation_metadata),
alter_fun = alter_fun,
alter_fun_is_vectorized = FALSE,
col = col,
remove_empty_columns = TRUE,
remove_empty_rows = TRUE,
pct_side = "right", border = FALSE,
row_names_side = "left",
top_annotation = ha,
pct_gp = gpar(fontsize = 12, fontfamily = 'sans'),
row_names_gp = gpar(fontsize = 12, fontfamily = 'sans'),
right_annotation =  rowAnnotation(rbar = anno_oncoprint_barplot()),
left_annotation = NULL, show_heatmap_legend = TRUE,
bottom_annotation =  columnAnnotation(botbar = anno_oncoprint_barplot(axis_param = list(direction = "reverse"))),
column_title = column_title)
# Now we save our plot:
# Open a new PNG device for plotting
png(filename = paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''), units = 'cm', width = 35, height = 22, res = 300)
# Draw the oncoprint on the current plotting device
draw(oncoPrint_with_legend, heatmap_legend_side = "right", annotation_legend_side = "right")
# Add text to the "rbar" annotation
decorate_annotation("rbar", {
grid.text("Number of\nmutations\nin cohort", x = unit(10, "mm"), y = unit(165, "mm"), rot = 0, just = "bottom")
})
# Add text to the "botbar" annotation
decorate_annotation("botbar", {
grid.text("Number of\nmutations\nin patient", x = unit(-9, "mm"), y = unit(10, "mm"), rot = 90, just = "bottom")
})
# Close the current plotting device
dev.off()
# Display the oncoprint
png::readPNG(source = paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''))
# Display the oncoprint
png::readPNG(source = paste(output_folder, '/CHR_BP-CMML_Patients__Oncoprint.png', sep = ''))
install.packages("cleanrmd")
?cleanrmd::html_document_clean
knit_with_parameters("~/GitHub/2024__CRM__BP-CMML_Manuscript/Scripts/Figure_01/Panel_A.Rmd")
unlink("Panel_A_cache", recursive = TRUE)
?html_document
install.packages("rmdformats")
?rmdformats::html_clean
install.packages('bookdown')
install.packages("bookdown")
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
dir.create(paste(local_wd_folder, "/Data", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_01", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_02", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_03", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_04", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_05", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_06", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Figure_07", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Supplemental", sep = ''), showWarnings = F)
dir.create(paste(local_wd_folder, "/Figures/Not_Included", sep = ''), showWarnings = F)
# Define the data folder and output folder
data_folder <- './Data'
output_folder <- './Figures/Figure_01'
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Define a list of required packages used in this script
packages_required <- c("ComplexHeatmap", "stringr",
"unikn", "RColorBrewer", "yarrr",
"scales", "ggsci")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
# Load stringr for string manipulation
library(stringr, quietly = TRUE)
# Load ComplexHeatmap for creating complex heatmaps
library(ComplexHeatmap, quietly = TRUE)
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Write the session information to a text file
writeLines(capture.output(sessionInfo()), file.path(script_folder, 'Figure_01_SessionInfo.txt'))
# Print the session information
sessionInfo()
Clinical_metadata <- read.csv(paste(data_folder, '/Oncoprint/Christie_BP-CMML_cohort_clinical_metadata.csv', sep = ''), row.names = 'Patient.ID')
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
local_wd_folder
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(rstudioapi::getSourceEditorContext()$path))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
local_wd_folder
# Specify the URL of the file you want to download
url <- "https://zenodo.org/api/records/12507948/draft/files/Data.zip/content"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = ""), mode = "wb")
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Define a list of required packages used in this script
packages_required <- c("inborutils")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
# Specify the URL of the file you want to download
url <- "https://zenodo.org/api/records/12507948/draft/files/Data.zip/content"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = ""), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/api/records/12507948/draft/files/Data.zip/content"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = ""), mode = "wb")
local_wd_folder
# Install the package inborutis and load into library
library(inborutils)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Define a list of required packages used in this script
packages_required <- c("inborutils")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
# install.packages("devtools")
devtools::install_github("inbo/inborutils")
# Install the package inborutis and load into library
library(inborutils)
doi <- "10.5281/zenodo.12507948"
inborutils::download_zenodo(doi, local_wd_folder, quiet = TRUE)
doi
# Install the package inborutis and load into library
library(inborutils)
doi <- "10.5281/zenodo.12507948"
inborutils::download_zenodo(doi, local_wd_folder, quiet = TRUE)
doi
str(doi)
as.character(doi)
# Install the package inborutis and load into library
library(inborutils)
doi <- "10.5281/zenodo.12507948"
doi <- as.character(doi)
inborutils::download_zenodo(doi, local_wd_folder, quiet = TRUE)
local_wd_folder
doi
inborutils
?inborutils::download_zenodo()
# Specify the URL of the file you want to download
url <- "https://zenodo.org/api/records/12507948?token=t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/api/records/12507948/draft/files/Data.zip/content?token=t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/record/12507948?token=t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/record/12507948?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb")
?download.file
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb", method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb", method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "w", method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), mode = "wb", method="libcurl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="wget")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="libcurl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="internal")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948/draft/files/Data.zip/content?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/record/12507948?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/record/12507948?token=t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="curl")
# Specify the URL of the file you want to download
url <- "https://zenodo.org/records/12507948?token=<t7Hd34ZYTUfFJ1zg4zFGU3uOXSJbXsj3v2ZMNNTOvmKiZkB6MHKsemu7xwZl>"
# Specify the file name and location where you want to save the file on your computer
file_name <- "Data.zip"
# Call the download.file() function, passing in the URL and file name/location as arguments
download.file(url, paste(local_wd_folder, file_name, sep = "/"), method="curl")
install_github("eblondel/zen4R")
require("remotes")
install_github("eblondel/zen4R")
zenodo <- ZenodoManager$new()
library(zen4R)
zenodo <- ZenodoManager$new()
library(zen4R)

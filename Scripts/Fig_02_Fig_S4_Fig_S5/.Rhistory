sep = ''), row.names = F)
DrugResponses_genes$`Axitinib (AG-013736)`
VanGalen_celltype_modules_scores <- read.csv(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/ssEnrichments/CellType/2019__VanGalen_et_al__AML_signatures__Enrichments.csv',
sep = ''), row.names = 'X')
colnames(VanGalen_celltype_modules_scores) <- c('HSC-like',
'HSC.Prog-like',
'Progenitor-like',
'GMP-like',
'Promono-like',
'Monocyte-like',
'cDC-like',
'Myeloid-like')
VanGalen_celltype_modules_scores <- t(VanGalen_celltype_modules_scores)
Identity <- data.frame(row.names = rownames(VanGalen_celltype_modules_scores))
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap_vangalen <- Heatmap(VanGalen_celltype_modules_scores,
name = 'ssGSEA Score',
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_names_gp = gpar(fontsize=10), cluster_rows = F,
cluster_column_slices = F,
column_names_gp = gpar(fontsize=10), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18")
# Define a list of required packages used in this script
packages_required <- c("escape", "dplyr", "stringr", "ComplexHeatmap")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
library(escape, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(stringr, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
VanGalen_celltype_modules_scores <- read.csv(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/ssEnrichments/CellType/2019__VanGalen_et_al__AML_signatures__Enrichments.csv',
sep = ''), row.names = 'X')
colnames(VanGalen_celltype_modules_scores) <- c('HSC-like',
'HSC.Prog-like',
'Progenitor-like',
'GMP-like',
'Promono-like',
'Monocyte-like',
'cDC-like',
'Myeloid-like')
VanGalen_celltype_modules_scores <- t(VanGalen_celltype_modules_scores)
Identity <- data.frame(row.names = rownames(VanGalen_celltype_modules_scores))
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap_vangalen <- Heatmap(VanGalen_celltype_modules_scores,
name = 'ssGSEA Score',
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_names_gp = gpar(fontsize=10), cluster_rows = F,
cluster_column_slices = F,
column_names_gp = gpar(fontsize=10), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
# Open a new PNG device for plotting
png(filename = paste(figures_folder, '/Supplemental/Fig_S4-1.png', sep = ''), units = 'cm', width = 18.62, height = 5, res = 300)
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
Velten_celltype_modules_scores <- read.csv(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/ssEnrichments/CellType/2017__Velten_et_al__Healthy_signatures__Enrichments.csv',
sep = ''), row.names = 'X')
colnames(Velten_celltype_modules_scores) <- c('HOXA3.HOXB6',
'HLF.ZFP36L2',
'SPINK2.SELL',
'FLT3.SATB1',
'IRF1.CASP1',
'EBF1.ID3',
'EAF2.KLF4',
'IRF7.IRF8',
'SPI1.GFI1',
'CEBPA.CEBPD',
'HDC.LMO4',
'GATA2.NFE2',
'TAL1.HSF1',
'GP1BB.PBX1',
'GATA1.KLF1')
Velten_celltype_modules_scores <- t(Velten_celltype_modules_scores)
Module_Identity <- data.frame(row.names = rownames(Velten_celltype_modules_scores))
Module_Identity[c('HOXA3.HOXB6',
'HLF.ZFP36L2',
'SPINK2.SELL'),'Celltype'] <- 'HSC/MPP'
Module_Identity[c('FLT3.SATB1'),'Celltype'] <- 'LMPP'
Module_Identity[c('IRF1.CASP1',
'EBF1.ID3'),'Celltype'] <- 'CLP'
Module_Identity[c('EAF2.KLF4',
'IRF7.IRF8'),'Celltype'] <- 'MDP'
Module_Identity[c('SPI1.GFI1',
'CEBPA.CEBPD'),'Celltype'] <- 'NeP'
Module_Identity[c('HDC.LMO4'),'Celltype'] <- 'EoBaMaP'
Module_Identity[c('GATA2.NFE2',
'TAL1.HSF1'),'Celltype'] <- 'MEP'
Module_Identity[c('GP1BB.PBX1'),'Celltype'] <- 'MkP'
Module_Identity[c('GATA1.KLF1'),'Celltype'] <- 'EP'
Module_Identity$Celltype <- factor(Module_Identity$Celltype,
levels = c('HSC/MPP',
'LMPP',
'CLP',
'MDP',
'NeP',
'EoBaMaP',
'MEP',
'MkP',
'EP'))
Celltype <- data.frame(row.names = c('HSC/MPP',
'LMPP',
'CLP',
'MDP',
'NeP',
'EoBaMaP',
'MEP',
'MkP',
'EP'))
Celltype$Colour <- c('#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000')
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap <- Heatmap(Velten_celltype_modules_scores,
name = 'ssGSEA Score',
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_split = Module_Identity$Celltype, cluster_rows = F,
row_gap = unit(0.05, "cm"),
cluster_column_slices = F,
row_names_gp = gpar(fontsize=9), row_title_rot = 0,
row_title_gp = gpar(fontsize=9, fontface='bold', col=Celltype$Colour),
column_names_gp = gpar(fontsize=9), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
draw(HMap, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
# Open a new PNG device for plotting
png(filename = paste(figures_folder, '/Supplemental/Fig_S4-2.png', sep = ''), units = 'cm', width = 19.2, height = 8, res = 300)
draw(HMap, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
VanGalen_celltype_modules_scores <- read.csv(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/ssEnrichments/CellType/2019__VanGalen_et_al__AML_signatures__Enrichments.csv',
sep = ''), row.names = 'X')
colnames(VanGalen_celltype_modules_scores) <- c('HSC-like',
'HSC.Prog-like',
'Progenitor-like',
'GMP-like',
'Promono-like',
'Monocyte-like',
'cDC-like',
'Myeloid-like')
VanGalen_celltype_modules_scores <- t(VanGalen_celltype_modules_scores)
Identity <- data.frame(row.names = rownames(VanGalen_celltype_modules_scores))
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap_vangalen <- Heatmap(VanGalen_celltype_modules_scores,
name = 'ssGSEA Score',
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_names_gp = gpar(fontsize=10), cluster_rows = F,
cluster_column_slices = F,
column_names_gp = gpar(fontsize=10), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
# Open a new PNG device for plotting
png(filename = paste(figures_folder, '/Supplemental/Fig_S4-1.png', sep = ''), units = 'cm', width = 18.62, height = 6, res = 300)
draw(HMap_vangalen, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
Velten_celltype_modules_scores <- read.csv(paste(data_folder, '/RNASeq/InHouse/Pathway_Analysis/ssEnrichments/CellType/2017__Velten_et_al__Healthy_signatures__Enrichments.csv',
sep = ''), row.names = 'X')
colnames(Velten_celltype_modules_scores) <- c('HOXA3.HOXB6',
'HLF.ZFP36L2',
'SPINK2.SELL',
'FLT3.SATB1',
'IRF1.CASP1',
'EBF1.ID3',
'EAF2.KLF4',
'IRF7.IRF8',
'SPI1.GFI1',
'CEBPA.CEBPD',
'HDC.LMO4',
'GATA2.NFE2',
'TAL1.HSF1',
'GP1BB.PBX1',
'GATA1.KLF1')
Velten_celltype_modules_scores <- t(Velten_celltype_modules_scores)
Module_Identity <- data.frame(row.names = rownames(Velten_celltype_modules_scores))
Module_Identity[c('HOXA3.HOXB6',
'HLF.ZFP36L2',
'SPINK2.SELL'),'Celltype'] <- 'HSC/MPP'
Module_Identity[c('FLT3.SATB1'),'Celltype'] <- 'LMPP'
Module_Identity[c('IRF1.CASP1',
'EBF1.ID3'),'Celltype'] <- 'CLP'
Module_Identity[c('EAF2.KLF4',
'IRF7.IRF8'),'Celltype'] <- 'MDP'
Module_Identity[c('SPI1.GFI1',
'CEBPA.CEBPD'),'Celltype'] <- 'NeP'
Module_Identity[c('HDC.LMO4'),'Celltype'] <- 'EoBaMaP'
Module_Identity[c('GATA2.NFE2',
'TAL1.HSF1'),'Celltype'] <- 'MEP'
Module_Identity[c('GP1BB.PBX1'),'Celltype'] <- 'MkP'
Module_Identity[c('GATA1.KLF1'),'Celltype'] <- 'EP'
Module_Identity$Celltype <- factor(Module_Identity$Celltype,
levels = c('HSC/MPP',
'LMPP',
'CLP',
'MDP',
'NeP',
'EoBaMaP',
'MEP',
'MkP',
'EP'))
Celltype <- data.frame(row.names = c('HSC/MPP',
'LMPP',
'CLP',
'MDP',
'NeP',
'EoBaMaP',
'MEP',
'MkP',
'EP'))
Celltype$Colour <- c('#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000',
'#000000')
breaks_val <- seq(from = 0, to = 1, length.out = 14)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(c("#67000D",brew_mix)))
HMap <- Heatmap(Velten_celltype_modules_scores,
name = 'ssGSEA Score',
col = col_heatmap_guide, rect_gp = gpar(col = "black", lwd = 0.05),
column_title_gp = gpar(fontsize=11, fontface='bold'),
row_split = Module_Identity$Celltype, cluster_rows = F,
row_gap = unit(0.05, "cm"),
cluster_column_slices = F,
row_names_gp = gpar(fontsize=9), row_title_rot = 0,
row_title_gp = gpar(fontsize=9, fontface='bold', col=Celltype$Colour),
column_names_gp = gpar(fontsize=9), show_heatmap_legend = F,
heatmap_legend_param = list(legend_direction = "horizontal",
legend_height = unit(5, "cm")),
row_names_side = 'right')
draw(HMap, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
# Open a new PNG device for plotting
png(filename = paste(figures_folder, '/Supplemental/Fig_S4-2.png', sep = ''), units = 'cm', width = 19.2, height = 10, res = 300)
draw(HMap, heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
invisible(dev.off())
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
# Get the directory of the current script
script_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
# Define the data folder and output folder
data_folder <- './Data'
#results_folder <- './Results'
figures_folder <- './Figures'
dir.create(path = paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2/DEGs_Comparisons/BP-CMML_vs_Control', sep = ''),
showWarnings = F)
# Set a seed for reproducibility
set.seed(123)
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.18")
# Define a list of required packages used in this script
packages_required <- c("ComplexHeatmap", "stringr",
"unikn", "RColorBrewer", "yarrr",
"scales", "ggsci", "R.utils", "GenomicFeatures",
"tximport", "DESeq2", "tidyverse", "plotly", "dplyr",
"ashr", "apeglm", "EnhancedVolcano", "IHW", "circlize", "Matrix")
# Identify any required packages that are not installed
packages_uninstalled <- packages_required[!(packages_required %in% installed.packages()[,"Package"])]
# Install any uninstalled packages
if(length(packages_uninstalled)) BiocManager::install(packages_uninstalled)
# Load stringr for string manipulation
library(stringr, quietly = TRUE)
library(reticulate)
# Load ComplexHeatmap for creating complex heatmaps
library(ComplexHeatmap, quietly = TRUE)
library(EnhancedVolcano)
library(GenomicFeatures)
library(circlize)
library(tidyverse)
library(R.utils)
library(tximport)
library(DESeq2)
library(dplyr)
library(IHW)
library(ashr)
library(apeglm)
library(plotly)
# To create a conda environment first install either miniconda3 or anaconda3 on your OS
# conda create --name BPCMML python-kaleido plotly -c conda-forge
reticulate::use_condaenv("BPCMML")
# Load additional colour palette packages
library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Write the session information to a text file
writeLines(capture.output(sessionInfo()), file.path(script_folder, 'Fig_02_CDEF_S2_SessionInfo.txt'))
# Print the session information
sessionInfo()
# Define the path to the SQLite database
txdb.filename <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.annotation.sqlite", sep = '')
# Check if the SQLite database already exists
if (file.exists(txdb.filename)) {
# Print a message indicating that the database already exists and is being loaded
print(sprintf('File %s already exist! Now Loading...',txdb.filename))
# Load the SQLite database
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the GTF file to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
dir.create(paste(data_folder, "/Resources/RNASeq/Annotation_files", sep = ''),
showWarnings = F)
# Define the local path where the GTF file will be saved
destfile <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.annotation.gtf.gz", sep = '')
# Download the GTF file
download.file(url, destfile)
# Define the path of the decompressed GTF file
gtf <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.annotation.gtf", sep = '')
# If the decompressed GTF file already exists, remove it
if (file.exists(gtf)) {
file.remove(gtf)
}
# Decompress the GTF file
gunzip(destfile)
# Create a TxDb object from the GTF file
txdb <- makeTxDbFromGFF(gtf)
# Save the TxDb object as a SQLite database for later use
saveDb(txdb, txdb.filename)
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Print a message indicating that the SQLite database has been generated
print(sprintf('File %s has been generated!',txdb.filename))
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
print(sprintf('File %s already exist! Now Loading...',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/Resources/RNASeq/Annotation_files/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/Resources/RNASeq/Annotation_files/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Create a progress bar
pb <- txtProgressBar(min = 0, max = nrow(gtf_df_genes), style = 3)
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Update the progress bar
setTxtProgressBar(pb, gene_index)
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Close the progress bar
close(pb)
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
print(sprintf('File %s has been generated! Now loading...',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/Resources/RNASeq/Annotation_files/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
Samples_metadata <- read.csv(paste(data_folder, '/RNASeq/InHouse/Metadata/Samples_Metadata.csv', sep = ''), row.names = 'Patient.ID')
Samples_metadata$Condition <- factor(Samples_metadata$Condition)
Samples_metadata$Condition <- relevel(Samples_metadata$Condition, ref = "Control")
dir.create(paste(data_folder, '/RNASeq/InHouse/DESeq2', sep = ''), showWarnings = F)
TXI.Genes <- readRDS(paste(data_folder, '/RNASeq/InHouse/Counts/Tximport_object.rds', sep = ''))
library(DESeq2)
dds = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds <- estimateSizeFactors(dds)
keep <- rowSums(counts(dds, normalized=TRUE) >= 5 ) >= 3
dds <- dds[keep,]
dds <- DESeq(dds)
table(isUnique(rowData(dds)$gene_name))
rowData(dds)[grep(FALSE,isUnique(rowData(dds)$gene_name)),]
df <- as.data.frame(rowData(dds)[grep(FALSE,isUnique(rowData(dds)$gene_name)),])
# Maximum absolute value of Expression by Gene
maxabs <- with(df, aggregate(baseMean, list(gene_name=gene_name), FUN=function(x) max(abs(x))))
# Combine with original data frame
df <- merge(df, maxabs, by="gene_name")
# Get desired rows
df_unique <- subset(df, abs(baseMean) == x)
# Remove duplicate genes (all gene rows should be identical)
df_unique <- df_unique[!duplicated(df_unique$gene_name), ]
unique_genes <- c(rowData(dds)[grep(TRUE,isUnique(rowData(dds)$gene_name)),]$gene_id,
df_unique$gene_id)
write.csv(x = data.frame(unique_genes), file = paste(data_folder, '/RNASeq/InHouse/Counts/Processed_counts/List_unique_genes.csv', sep = ''), quote = F, row.names = F)
table(isUnique(unique_genes))
print(table(isUnique(unique_genes))-table(isUnique(rowData(dds)$gene_name))[[2]])
print((table(isUnique(unique_genes))-table(isUnique(rowData(dds)$gene_name))[[2]])/table(isUnique(unique_genes)))
dds_parametric = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData = Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds_parametric <- estimateSizeFactors(dds_parametric)
dds_parametric <- dds_parametric[unique_genes,]
dds_parametric <- DESeq(dds_parametric, fitType = "parametric")
Residuals_parametric <- log(mcols(dds_parametric)$dispGeneEst)-log(mcols(dds_parametric)$dispFit)
plotDispEsts(dds_parametric, main= "dispEst: Parametric")
hist(x = Residuals_parametric, xlim = c(-20,10))
Median_Absolute_Residual_parametric <- median(abs(log(mcols(dds_parametric)$dispGeneEst)-log(mcols(dds_parametric)$dispFit)))
dds_parametric$Condition <- relevel(dds_parametric$Condition, ref = "Control")
res_parametric <- results(dds_parametric, contrast=c("Condition", "BP-CMML", "Control"))
dds_local = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds_local <- estimateSizeFactors(dds_local)
dds_local <- dds_local[unique_genes,]
dds_local <- DESeq(dds_local, fitType = "local")
Residuals_local <- log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)
plotDispEsts(dds_local, main= "dispEst: Local")
hist(x = Residuals_local, xlim = c(-20,10))
Median_Absolute_Residual_local <- median(abs(log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)))
dds_local$Condition <- relevel(dds_local$Condition, ref = "Control")
res_local <- results(dds_local, contrast=c("Condition", "BP-CMML", "Control"))
if ((Median_Absolute_Residual_parametric < Median_Absolute_Residual_local) == TRUE) {
Best_scoring_fitType <- 'parametric'
} else {
Best_scoring_fitType <- 'local'
}
dds = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds <- estimateSizeFactors(dds)
dds <- dds[unique_genes,]
dds <- DESeq(dds, fitType = Best_scoring_fitType)
?fitType
?DESeq
Residuals_local
# Get the path of the current script
# Then get the parent directory of the parent directory of the parent directory
local_wd_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
# Set the root directory for knitr to the local working directory
knitr::opts_knit$set(root.dir = local_wd_folder)
RF_cluster_metadata <- read.csv(paste(data_folder, '/RandomForest/Results/Clustering/K2/RF_K2_Clustered_Metadata.csv',
sep = ''), row.names = 'Patient.ID')
BeatAML_drug_response <- as.matrix(RF_cluster_metadata[,91:177])
BeatAML_drug_response
dim(BeatAML_drug_response)

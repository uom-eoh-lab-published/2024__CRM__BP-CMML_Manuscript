library(unikn, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(yarrr, quietly = TRUE)
library(scales, quietly = TRUE)
library(ggsci, quietly = TRUE)
# Define a set of custom color palettes from the unikn package
mix_1 <- usecol(pal = c(Karpfenblau, "white", Peach), n = 15)
mix_2 <- usecol(pal = c(rev(pal_seeblau), "white", pal_pinky))
mix_3 <- usecol(pal = c(rev(pal_bordeaux), "white", pal_petrol), n = 15)
# Display the custom palettes
seecol(list(mix_1, mix_2, mix_3), col_brd = "white", lwd_brd = 4, title = "Comparing palettes mixed from unikn colors", pal_names = c("mix_1", "mix_2", "mix_3"))
# Define a second set of custom palettes from the RColorBrewer and yarrr packages
brew_mix <- usecol(c(rev(brewer.pal(n = 4, name = "Reds")), "white", brewer.pal(n = 4, name = "Blues")), n = 13)
brew_ext <- usecol(brewer.pal(n = 11, name = "Spectral"), n = 12)
yarrr_mix <- usecol(c(piratepal("nemo"), piratepal("bugs")))
yarrr_mod <- usecol(c(piratepal("ipod")), n = 9)
# Display the second set of custom palettes
seecol(pal = list(brew_mix, brew_ext, yarrr_mix, yarrr_mod), col_brd = "white", lwd_brd = 2, title = "Using usecol() and seecol() to mix and modify palettes", pal_names = c("brew_mix", "brew_ext", "yarrr_mix", "yarrr_mod"))
# Define additional custom palettes from the scales package
natjournals_palette <- pal_npg("nrc")(10)
# Write the session information to a text file
writeLines(capture.output(sessionInfo()), file.path(script_folder, 'Panel_A_SessionInfo.txt'))
# Print the session information
sessionInfo()
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
sprintf('File %s already exist! Now Loading',txdb.filename)
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
sprintf('File %s has been generated!',txdb.filename)
}
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
sprintf('File %s already exist! Now Loading',txdb.filename)
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
sprintf('File %s has been generated!',txdb.filename)
}
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
sprintf('File %s already exist! Now Loading',txdb.filename)
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
sprintf('File %s has been generated!',txdb.filename)
}
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
sprintf('File %s already exist! Now Loading',txdb.filename)
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
sprintf('File %s has been generated!',txdb.filename)
}
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
sprintf('File %s already exist! Now Loading',txdb.filename)
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
sprintf('File %s has been generated!',txdb.filename)
}
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
if (file.exists(txdb.filename)) {
print(sprintf('File %s already exist! Now Loading',txdb.filename))
txdb <- loadDb(txdb.filename)
} else {
# Define the URL of the file you want to download
url <- "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_42/gencode.v42.annotation.gtf.gz"
# Define the local path where the file will be saved
destfile <- paste(data_folder, "/GENCODE_v42.annotation.gtf.gz", sep = '')
# Use the download.file() function to download the file
download.file(url, destfile)
# Define the path of the decompressed file
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
# Remove the decompressed file if it already exists
if (file.exists(gtf)) {
file.remove(gtf)
}
gunzip(destfile)
txdb <- makeTxDbFromGFF(gtf)
# We can use saveDb() to save the TxDb database (SQLite database) for later uses
saveDb(txdb, txdb.filename)
# We can use loadDb() to use the TxDb database
txdb <- loadDb(txdb.filename)
print(sprintf('File %s has been generated!',txdb.filename))
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- "./Resources/GENCODE_v42.gene_metadata.csv"
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
sprintf('File %s already exist!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv('./Resources/GENCODE_v42.gene_metadata.csv', header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- "./Resources/ENCODE_v42.annotation.gtf"
txdb.filename <- "./Resources/GENCODE_v42.annotation.sqlite"
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
sprintf('File %s has been generated!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv('./Resources/GENCODE_v42.gene_metadata.csv', header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
sprintf('File %s already exist!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/ENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
sprintf('File %s has been generated!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
sprintf('File %s already exist!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
sprintf('File %s has been generated!',gencode_gene_info_df.filename)
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
print(sprintf('File %s already exist!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Iterate over the rows of the filtered dataframe
lapply(1:nrow(gtf_df_genes), function(gene_index) {
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
sapply(items, function(item) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
})
})
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
print(sprintf('File %s has been generated!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
print(sprintf('File %s already exist!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Create a progress bar
pb <- txtProgressBar(min = 0, max = nrow(gtf_df_genes), style = 3)
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Update the progress bar
setTxtProgressBar(pb, gene_index)
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Close the progress bar
close(pb)
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
print(sprintf('File %s has been generated!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
print(sprintf('File %s already exist!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
# Create an empty dataframe to store the gene metadata
gencode_gene_info_df <- data.frame()
# Create a progress bar
pb <- txtProgressBar(min = 0, max = nrow(gtf_df_genes), style = 3)
# Iterate over the rows of the filtered dataframe
for (gene_index in 1:nrow(gtf_df_genes)) {
# Update the progress bar
setTxtProgressBar(pb, gene_index)
# Extract the gene information from the ninth column of the current row
gene_info <- gsub(";\\s+", ";", gtf_df_genes[gene_index,'V9'])
# Split the gene information into items
items <- strsplit(gene_info, ";")[[1]]
# Iterate over the items and split each one on the space
for (item in items) {
parts <- unlist(strsplit(item, " "))
# If there are exactly two parts, add them to the dataframe as a new column
if (length(parts) == 2) {
gencode_gene_info_df[unlist(strsplit(items[[1]], " "))[[2]],sprintf('%s',parts[1])] <- parts[2]
}
}
}
# Close the progress bar
close(pb)
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
print(sprintf('File %s has been generated!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}
# Define the path to the gene metadata CSV file
gencode_gene_info_df.filename <- paste(data_folder, "/GENCODE_v42.gene_metadata.csv", sep = '')
# Check if the CSV file already exists
if (file.exists(gencode_gene_info_df.filename)) {
# Print a message indicating that the CSV file already exists
print(sprintf('File %s already exist!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
} else {
# Define the path to the GTF file and the SQLite database
gtf <- paste(data_folder, "/GENCODE_v42.annotation.gtf", sep = '')
txdb.filename <- paste(data_folder, "/GENCODE_v42.annotation.sqlite", sep = '')
# Load the SQLite database
txdb <- loadDb(txdb.filename)
# Load the GTF file into a dataframe
gtf_df <- read.table(file = gtf, sep="\t", header=FALSE)
# Filter the dataframe to include only rows where the third column is 'gene'
gtf_df_genes <- gtf_df %>% dplyr::filter(V3 == 'gene')
library(dplyr)
library(tidyr)
# Create a progress bar
pb <- txtProgressBar(min = 0, max = nrow(gtf_df_genes), style = 3)
# Convert the 9th column to a character vector
gtf_df_genes$V9 <- as.character(gtf_df_genes$V9)
# Remove the extra spaces
gtf_df_genes$V9 <- gsub(";\\s+", ";", gtf_df_genes$V9)
# Split the gene information into items
gene_info_list <- strsplit(gtf_df_genes$V9, ";")
# Convert the list to a data frame
gene_info_df <- data.frame(matrix(unlist(gene_info_list), nrow=length(gene_info_list), byrow=T))
# Split each item on the space and convert to a long format data frame
gencode_gene_info_df <- gene_info_df %>%
mutate(row_number = row_number()) %>%
gather(key, value, -row_number) %>%
separate(value, into = c("key", "value"), sep = " ") %>%
spread(key, value) %>%
select(-row_number)
# Close the progress bar
close(pb)
# Write the dataframe to a CSV file
write.csv(x = gencode_gene_info_df, file = gencode_gene_info_df.filename, row.names = F)
# Print a message indicating that the CSV file has been generated
print(sprintf('File %s has been generated!',gencode_gene_info_df.filename))
# Load the CSV file into a dataframe
Genes_annotation_metadata <- read.csv(paste(data_folder, '/GENCODE_v42.gene_metadata.csv', sep = ''), header = TRUE)
# Set the row names of the dataframe to the gene IDs
rownames(Genes_annotation_metadata) <- Genes_annotation_metadata$gene_id
}

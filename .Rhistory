colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds_local <- estimateSizeFactors(dds_local)
dds_local <- dds_local[unique_genes,]
dds_local <- DESeq(dds_local, fitType = "local")
Residuals_local <- log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)
plotDispEsts(dds_local, main= "dispEst: Local")
hist(x = Residuals_local, xlim = c(-20,10))
Median_Absolute_Residual_local <- median(abs(log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)))
dds_local$Condition <- relevel(dds_local$Condition, ref = "Control")
res_local <- results(dds_local, contrast=c("Condition", "BP-CMML", "Control"))
if ((Median_Absolute_Residual_parametric < Median_Absolute_Residual_local) == TRUE) {
Best_scoring_fitType <- 'parametric'
} else {
Best_scoring_fitType <- 'local'
}
dds = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds <- estimateSizeFactors(dds)
dds <- dds[unique_genes,]
dds <- DESeq(dds, fitType = Best_scoring_fitType)
# Generating vst normalised counts
vst <- vst(dds, blind=FALSE)
head(assay(vst), 3)
vst_mat <- as.data.frame(vst@assays@data@listData[[1]]) %>% add_column(GeneSymbol = as.data.frame(rowData(vst))[,'gene_name'], .before = colnames(dds)[1]) %>% add_column(GeneBiotype = as.data.frame(rowData(vst))[,'gene_type'], .before = colnames(dds)[1])
write.csv(vst_mat, file = paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_vst_normalised_countmat.csv', sep = ''), quote = F, row.names = T)
# Generating rlog normalised counts
rlog <- rlogTransformation(dds, blind=FALSE)
head(assay(rlog), 3)
rlog_mat <- as.data.frame(rlog@assays@data@listData[[1]]) %>% add_column(GeneSymbol = as.data.frame(rowData(rlog))[,'gene_name'], .before = colnames(dds)[1]) %>% add_column(GeneBiotype = as.data.frame(rowData(rlog))[,'gene_type'], .before = colnames(dds)[1])
write.csv(rlog_mat, file = paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_rlog_normalised_countmat.csv', sep = ''), quote = F, row.names = T)
TF_list <- read.csv(paste(data_folder, '/RNASeq/Metadata/Gene_Metadata_Lambert2018_TFs.txt', sep = ''), sep = '\t', header = F)
HGNC_CD_markers_list <- read.csv(paste(data_folder, '/RNASeq/Metadata/Gene_Metadata_HGNC_CD_Markers.csv', sep = ''))
res <- results(dds, contrast=c("Condition", "BP-CMML", "Control"), filterFun = ihw)
resNorm <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", res = res, type = 'normal')
resNorm_adj <- as.data.frame(resNorm) %>% filter(padj < 0.05)
resAsh <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", res = res, type = 'ashr')
resAsh_adj <- as.data.frame(resAsh) %>% filter(padj < 0.05)
resLFC <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", type="apeglm")
resLFC_adj <- as.data.frame(resLFC) %>% filter(padj < 0.05)
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resNorm, xlim=xlim, ylim=ylim, main="normal")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
resAsh_df_plot <- as.data.frame(resAsh)
resAsh_df_plot[,'Significance'] <- 'Non-significant'
resAsh_df_plot[rownames(resAsh_adj %>% filter(padj <0.05)),'Significance'] <- 'Significant'
cols <- c('Significant' = '#E58368',
'Non-significant' = '#1d1929')
png(filename = paste(figures_folder, '/Not_Included/DGE_BP-CMML_vs_Control_resAsh.png', sep = ''), units = 'cm', width = 8.58, height = 12.1, res = 300)
ggplot(resAsh_df_plot, aes(x = log10(baseMean), y = log2FoldChange,
fill = Significance, color = Significance)) + theme_linedraw(base_line_size = 0.2) +
ggtitle(label = "") +
geom_point(inherit.aes = T, shape = 21, alpha = 0.8, size = 1.5) +
coord_cartesian(ylim = c(-4,4), xlim = c(-0.5,5))  +
xlab(bquote(~Log[10]~ 'Mean of normalised counts')) + ylab(bquote(~Log[2]~ 'fold change')) +
theme(legend.position = 'bottom',
plot.title = element_text(hjust = 0, face = 'bold', size = 16),
axis.title.x = element_text(family='Helvetica', size=12, face = 'bold'),
axis.title.y = element_text(family='Helvetica', size=12, face = 'bold'),
legend.title = element_text(family='Helvetica', size=12),
legend.text = element_text(family='Helvetica', size=10)) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
guides(fill = guide_legend(title = 'Significance status (padj)',
title.position = "top",
title.hjust = 0.5, nrow = 1, override.aes = list(size=3)),
color = guide_none())
dev.off()
dir.create(path = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML', sep = ''),
showWarnings = F)
resAsh_df <- as.data.frame(resAsh) %>% add_column(GeneSymbol =rowData(dds)[rownames(resAsh),'gene_name'], .before = 'baseMean') %>% add_column(GeneBiotype =rowData(dds)[rownames(resAsh),'gene_type'], .before = 'baseMean')
resAsh_df$Is_TF <- 'No'
resAsh_df[grep(TRUE, resAsh_df$GeneSymbol %in% TF_list$V1),'Is_TF'] <- 'Yes'
resAsh_df$Is_CD_Marker <- 'No'
resAsh_df[grep(TRUE, resAsh_df$GeneSymbol %in% HGNC_CD_markers_list$Approved.symbol),'Is_CD_Marker'] <- 'Yes'
res_significant <- resAsh_df %>% arrange(padj)
write.csv(res_significant,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_ALL_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant <- resAsh_df %>% dplyr::filter(padj < 0.05) %>% dplyr::arrange(padj)
write.csv(res_significant,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant_UP <- res_significant %>% dplyr::filter(log2FoldChange >= 0) %>% dplyr::arrange(padj)
write.csv(res_significant_UP,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_upregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant_DOWN <- res_significant %>% dplyr::filter(log2FoldChange < 0) %>% dplyr::arrange(padj)
write.csv(res_significant_DOWN,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_downregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
DESeq2_results <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_ALL_DEGs_LFC_Ashr.csv', sep = ''))
genemat_ord <- DESeq2_results
genemat_ord$Log10pval <- log10(genemat_ord$padj)
genemat_ord$log10FoldChange <- log10(2^genemat_ord$log2FoldChange)
# load library
library(EnhancedVolcano)
library(ggrepel)
# plot adding up all layers we have seen so far
keyvals <- ifelse(
genemat_ord$log2FoldChange < 0 & genemat_ord$pvalue < 10e-2, '#415384',
ifelse(genemat_ord$log2FoldChange > 0 & genemat_ord$pvalue < 10e-2, '#C92A1D',
'#727272'))
keyvals[is.na(keyvals)] <- '#e5e5e5'
names(keyvals)[keyvals == '#C92A1D'] <- 'Upregulated'
names(keyvals)[keyvals == '#727272'] <- 'NS'
names(keyvals)[keyvals == '#415384'] <- 'Downregulated'
BP_Genes <- c('CXCL8', 'KLF2', 'JUNB', 'HOXB9', 'KLF6', 'S100A8', 'S100A9', 'NFKBIA', 'CXCL1', 'SPI1', 'HK3', 'BCL6', 'JUN')
Control_Genes <- c('CD79A','CD79B', 'VPREB3', 'MYC', 'TOP2B', 'CDK4')
plot <- EnhancedVolcano(genemat_ord,
lab = genemat_ord$GeneSymbol,
x = 'log2FoldChange',
y = 'pvalue',
cutoffLineCol = "grey10",
cutoffLineWidth = 0,
selectLab = c(BP_Genes, Control_Genes),
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-2,
FCcutoff = 0,
vlineWidth = 0,
pointSize = 2.0,
xlim = c(-6,6),
ylim = c(-0.5,12.5),
hline = 10e-2,
labSize = 2.0,
labCol = keyvals[grep(TRUE,genemat_ord$GeneSymbol %in% c(BP_Genes, Control_Genes),)],
labFace = 'bold',
caption = NULL,
boxedLabels = TRUE,
colAlpha = 4/5,
legendPosition = 'bottom',
legendLabSize = 3.5,
legendIconSize = 1.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'black',
colCustom = keyvals) + ggtitle(label = '', subtitle = '') +
theme_bw(base_line_size = 0.2) +
theme(axis.title.y = element_text(family='Helvetica', size = 12, face = 'bold'),
axis.title.x = element_text(family='Helvetica', size = 12, face = 'bold'),
plot.title = element_text(family='Helvetica', size = 12, face = 'bold'),
legend.position = 'bottom') +
guides(color = guide_legend(title = ''))
plot
png(filename = paste(figures_folder, '/Figure_02/Panel_D.png', sep = ''), units = 'in', width = 4.3, height = 5.5, res = 300)
print(plot)
dev.off()
UP_in_BP_CMML <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_upregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''), row.names = 'X')
UP_in_BP_CMML <- UP_in_BP_CMML %>% filter(GeneBiotype == 'protein_coding')
BP_CMML_genes <- (UP_in_BP_CMML %>% arrange(padj))$GeneSymbol[1:30]
# - - - - - - - - - - -
UP_in_healthy <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_downregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''), row.names = 'X')
UP_in_healthy <- UP_in_healthy %>% filter(GeneBiotype == 'protein_coding')
Healthy_genes <- ((UP_in_healthy %>% arrange(padj))$GeneSymbol[1:30])
genes_to_keep <- c(BP_CMML_genes, Healthy_genes)
vst_results <- read.csv(paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_vst_normalised_countmat.csv', sep = ''), row.names = 'X')
colnames(vst_results) <- str_replace_all(colnames(vst_results), pattern = 'X', replacement = '')
vst_results_to_keep <- vst_results[grep(TRUE,vst_results$GeneSymbol %in% genes_to_keep),]
rownames(vst_results_to_keep) <- vst_results_to_keep$GeneSymbol
vst_results_to_keep$GeneSymbol <- NULL
vst_results_to_keep$GeneBiotype <- NULL
vst_results_to_keep_mat <- as.matrix(vst_results_to_keep)
vst_results_to_keep_mat_top30bot30 <- vst_results_to_keep_mat[genes_to_keep,]
scaled_genemat_ord_GeneSymbol <- t(scale(t(vst_results_to_keep_mat_top30bot30)))[,]
scaled_genemat_ord_GeneSymbol <- t(scaled_genemat_ord_GeneSymbol)
gene_identity <- data.frame(row.names = genes_to_keep)
gene_identity[BP_CMML_genes,'Group'] <- 'Up in BP CMML'
gene_identity[Healthy_genes,'Group'] <- 'Up in Control'
gene_identity$Group <- factor(gene_identity$Group, levels = c('Up in Control',
'Up in BP CMML'))
Phenotype_identity <- data.frame(row.names = colnames(dds))
Phenotype_identity$Condition <- dds$Condition
Phenotype_identity[rownames(Phenotype_identity %>% filter(Condition == 'BP-CMML')),'Condition'] <- 'BP-CMML'
Phenotype_identity$Condition <- factor(Phenotype_identity$Condition, levels = c(
'Control',
'BP-CMML'))
colors_annotation <-  list(Condition = c(
'Control'    = '#A4BECE',
'BP-CMML' = '#DD3429'))
ha <- rowAnnotation(df=Phenotype_identity, col = colors_annotation,
gp = gpar(lwd =0.5, col = 'white'),
simple_anno_size = unit(0.25, 'cm'),
show_annotation_name = F, show_legend = FALSE,
annotation_legend_param = list(Condition = list(direction = "horizontal")))
# Working on the rest of the heatmap
breaks_val <- seq(from = -1.5, to = 2, length.out = 13)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(brew_mix))
set.seed(123)
Heatmap_genes <- Heatmap(scaled_genemat_ord_GeneSymbol, name = 'Scaled\nExpression',
col = col_heatmap_guide,
show_row_names = FALSE,
show_column_names = TRUE,
cluster_columns = TRUE,
cluster_rows = TRUE,
column_split = gene_identity$Group,
row_split = Phenotype_identity$Condition,
border = TRUE,
cluster_row_slices = F,
cluster_column_slices = F,
row_gap = unit(0.05, 'cm'),
column_gap = unit(0.05, 'cm'),
show_column_dend = FALSE,
row_dend_side = 'right',
column_names_side = 'bottom',
use_raster = FALSE,
rect_gp = gpar(col = "black", lwd = 0.05),
raster_by_magick = TRUE,
left_annotation = ha,
row_title_gp = gpar(fontsize = 0, angle=45),
row_names_gp = gpar(fontsize = 7, hjust=0),
column_title_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 4, hjust=0),
show_heatmap_legend = F,
heatmap_legend_param = list(
legend_direction = "horizontal",
legend_width = unit(5, "cm")))
Heatmap_genes
png(filename = paste(figures_folder, '/Figure_02/Panel_E.png', sep = ''), height = 10, width = 13, units = 'cm',res = 300)
ComplexHeatmap::draw(Heatmap_genes,
heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
dev.off()
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.15")
# Ensure BiocManager is available for installation of Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(version = "3.13")
BiocManager::install(version = "3.13")
BiocManager::install(version = "3.13", force = T)
print('ciao')
setwd(local_wd_folder)
dir.create(paste(data_folder, '/RNASeq/DESeq2', sep = ''), showWarnings = F)
TXI.Genes <- readRDS(paste(data_folder, '/RNASeq/Counts/Tximport_object.rds', sep = ''))
library(DESeq2)
dds = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds <- estimateSizeFactors(dds)
keep <- rowSums(counts(dds, normalized=TRUE) >= 5 ) >= 3
dds <- dds[keep,]
dds <- DESeq(dds)
table(isUnique(rowData(dds)$gene_name))
rowData(dds)[grep(FALSE,isUnique(rowData(dds)$gene_name)),]
df <- as.data.frame(rowData(dds)[grep(FALSE,isUnique(rowData(dds)$gene_name)),])
# Maximum absolute value of Expression by Gene
maxabs <- with(df, aggregate(baseMean, list(gene_name=gene_name), FUN=function(x) max(abs(x))))
# Combine with original data frame
df <- merge(df, maxabs, by="gene_name")
# Get desired rows
df_unique <- subset(df, abs(baseMean) == x)
# Remove duplicate genes (all gene rows should be identical)
df_unique <- df_unique[!duplicated(df_unique$gene_name), ]
unique_genes <- c(rowData(dds)[grep(TRUE,isUnique(rowData(dds)$gene_name)),]$gene_id,
df_unique$gene_id)
write.csv(x = data.frame(unique_genes), file = paste(data_folder, '/RNASeq/Counts/List_unique_genes.csv', sep = ''), quote = F, row.names = F)
table(isUnique(unique_genes))
print(table(isUnique(unique_genes))-table(isUnique(rowData(dds)$gene_name))[[2]])
print((table(isUnique(unique_genes))-table(isUnique(rowData(dds)$gene_name))[[2]])/table(isUnique(unique_genes)))
dds_parametric = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData = Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds_parametric <- estimateSizeFactors(dds_parametric)
dds_parametric <- dds_parametric[unique_genes,]
dds_parametric <- DESeq(dds_parametric, fitType = "parametric")
Residuals_parametric <- log(mcols(dds_parametric)$dispGeneEst)-log(mcols(dds_parametric)$dispFit)
plotDispEsts(dds_parametric, main= "dispEst: Parametric")
hist(x = Residuals_parametric, xlim = c(-20,10))
Median_Absolute_Residual_parametric <- median(abs(log(mcols(dds_parametric)$dispGeneEst)-log(mcols(dds_parametric)$dispFit)))
dds_parametric$Condition <- relevel(dds_parametric$Condition, ref = "Control")
res_parametric <- results(dds_parametric, contrast=c("Condition", "BP-CMML", "Control"))
dds_local = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds_local <- estimateSizeFactors(dds_local)
dds_local <- dds_local[unique_genes,]
dds_local <- DESeq(dds_local, fitType = "local")
Residuals_local <- log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)
plotDispEsts(dds_local, main= "dispEst: Local")
hist(x = Residuals_local, xlim = c(-20,10))
Median_Absolute_Residual_local <- median(abs(log(mcols(dds_local)$dispGeneEst)-log(mcols(dds_local)$dispFit)))
dds_local$Condition <- relevel(dds_local$Condition, ref = "Control")
res_local <- results(dds_local, contrast=c("Condition", "BP-CMML", "Control"))
if ((Median_Absolute_Residual_parametric < Median_Absolute_Residual_local) == TRUE) {
Best_scoring_fitType <- 'parametric'
} else {
Best_scoring_fitType <- 'local'
}
dds = DESeqDataSetFromTximport(txi = TXI.Genes,
colData = Samples_metadata,
rowData= Genes_annotation_metadata[rownames(TXI.Genes$counts),],
design = ~ Condition)
dds <- estimateSizeFactors(dds)
dds <- dds[unique_genes,]
dds <- DESeq(dds, fitType = Best_scoring_fitType)
# Generating vst normalised counts
vst <- vst(dds, blind=FALSE)
head(assay(vst), 3)
vst_mat <- as.data.frame(vst@assays@data@listData[[1]]) %>% add_column(GeneSymbol = as.data.frame(rowData(vst))[,'gene_name'], .before = colnames(dds)[1]) %>% add_column(GeneBiotype = as.data.frame(rowData(vst))[,'gene_type'], .before = colnames(dds)[1])
write.csv(vst_mat, file = paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_vst_normalised_countmat.csv', sep = ''), quote = F, row.names = T)
# Generating rlog normalised counts
rlog <- rlogTransformation(dds, blind=FALSE)
head(assay(rlog), 3)
rlog_mat <- as.data.frame(rlog@assays@data@listData[[1]]) %>% add_column(GeneSymbol = as.data.frame(rowData(rlog))[,'gene_name'], .before = colnames(dds)[1]) %>% add_column(GeneBiotype = as.data.frame(rowData(rlog))[,'gene_type'], .before = colnames(dds)[1])
write.csv(rlog_mat, file = paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_rlog_normalised_countmat.csv', sep = ''), quote = F, row.names = T)
res <- results(dds, contrast=c("Condition", "BP-CMML", "Control"), filterFun = ihw)
resNorm <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", res = res, type = 'normal')
resNorm_adj <- as.data.frame(resNorm) %>% filter(padj < 0.05)
resAsh <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", res = res, type = 'ashr')
resAsh_adj <- as.data.frame(resAsh) %>% filter(padj < 0.05)
resLFC <- lfcShrink(dds, coef="Condition_BP.CMML_vs_Control", type="apeglm")
resLFC_adj <- as.data.frame(resLFC) %>% filter(padj < 0.05)
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resNorm, xlim=xlim, ylim=ylim, main="normal")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
resAsh_df_plot <- as.data.frame(resAsh)
resAsh_df_plot[,'Significance'] <- 'Non-significant'
resAsh_df_plot[rownames(resAsh_adj %>% filter(padj <0.05)),'Significance'] <- 'Significant'
cols <- c('Significant' = '#E58368',
'Non-significant' = '#1d1929')
png(filename = paste(figures_folder, '/Not_Included/DGE_BP-CMML_vs_Control_resAsh.png', sep = ''), units = 'cm', width = 8.58, height = 12.1, res = 300)
ggplot(resAsh_df_plot, aes(x = log10(baseMean), y = log2FoldChange,
fill = Significance, color = Significance)) + theme_linedraw(base_line_size = 0.2) +
ggtitle(label = "") +
geom_point(inherit.aes = T, shape = 21, alpha = 0.8, size = 1.5) +
coord_cartesian(ylim = c(-4,4), xlim = c(-0.5,5))  +
xlab(bquote(~Log[10]~ 'Mean of normalised counts')) + ylab(bquote(~Log[2]~ 'fold change')) +
theme(legend.position = 'bottom',
plot.title = element_text(hjust = 0, face = 'bold', size = 16),
axis.title.x = element_text(family='Helvetica', size=12, face = 'bold'),
axis.title.y = element_text(family='Helvetica', size=12, face = 'bold'),
legend.title = element_text(family='Helvetica', size=12),
legend.text = element_text(family='Helvetica', size=10)) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
guides(fill = guide_legend(title = 'Significance status (padj)',
title.position = "top",
title.hjust = 0.5, nrow = 1, override.aes = list(size=3)),
color = guide_none())
dev.off()
dir.create(path = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons', sep = ''),
showWarnings = F)
dir.create(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML', sep = ''),
showWarnings = F)
resAsh_df <- as.data.frame(resAsh) %>% add_column(GeneSymbol =rowData(dds)[rownames(resAsh),'gene_name'], .before = 'baseMean') %>% add_column(GeneBiotype =rowData(dds)[rownames(resAsh),'gene_type'], .before = 'baseMean')
resAsh_df$Is_TF <- 'No'
resAsh_df[grep(TRUE, resAsh_df$GeneSymbol %in% TF_list$V1),'Is_TF'] <- 'Yes'
resAsh_df$Is_CD_Marker <- 'No'
resAsh_df[grep(TRUE, resAsh_df$GeneSymbol %in% HGNC_CD_markers_list$Approved.symbol),'Is_CD_Marker'] <- 'Yes'
res_significant <- resAsh_df %>% arrange(padj)
write.csv(res_significant,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_ALL_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant <- resAsh_df %>% dplyr::filter(padj < 0.05) %>% dplyr::arrange(padj)
write.csv(res_significant,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant_UP <- res_significant %>% dplyr::filter(log2FoldChange >= 0) %>% dplyr::arrange(padj)
write.csv(res_significant_UP,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_upregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
res_significant_DOWN <- res_significant %>% dplyr::filter(log2FoldChange < 0) %>% dplyr::arrange(padj)
write.csv(res_significant_DOWN,
file = paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_downregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''),
row.names = T, quote = FALSE)
DESeq2_results <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_ALL_DEGs_LFC_Ashr.csv', sep = ''))
genemat_ord <- DESeq2_results
genemat_ord$Log10pval <- log10(genemat_ord$padj)
genemat_ord$log10FoldChange <- log10(2^genemat_ord$log2FoldChange)
# load library
library(EnhancedVolcano)
library(ggrepel)
# plot adding up all layers we have seen so far
keyvals <- ifelse(
genemat_ord$log2FoldChange < 0 & genemat_ord$pvalue < 10e-2, '#415384',
ifelse(genemat_ord$log2FoldChange > 0 & genemat_ord$pvalue < 10e-2, '#C92A1D',
'#727272'))
keyvals[is.na(keyvals)] <- '#e5e5e5'
names(keyvals)[keyvals == '#C92A1D'] <- 'Upregulated'
names(keyvals)[keyvals == '#727272'] <- 'NS'
names(keyvals)[keyvals == '#415384'] <- 'Downregulated'
BP_Genes <- c('CXCL8', 'KLF2', 'JUNB', 'HOXB9', 'KLF6', 'S100A8', 'S100A9', 'NFKBIA', 'CXCL1', 'SPI1', 'HK3', 'BCL6', 'JUN')
Control_Genes <- c('CD79A','CD79B', 'VPREB3', 'MYC', 'TOP2B', 'CDK4')
plot <- EnhancedVolcano(genemat_ord,
lab = genemat_ord$GeneSymbol,
x = 'log2FoldChange',
y = 'pvalue',
cutoffLineCol = "grey10",
cutoffLineWidth = 0,
selectLab = c(BP_Genes, Control_Genes),
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-2,
FCcutoff = 0,
vlineWidth = 0,
pointSize = 2.0,
xlim = c(-6,6),
ylim = c(-0.5,12.5),
hline = 10e-2,
labSize = 2.0,
labCol = keyvals[grep(TRUE,genemat_ord$GeneSymbol %in% c(BP_Genes, Control_Genes),)],
labFace = 'bold',
caption = NULL,
boxedLabels = TRUE,
colAlpha = 4/5,
legendPosition = 'bottom',
legendLabSize = 3.5,
legendIconSize = 1.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'black',
colCustom = keyvals) + ggtitle(label = '', subtitle = '') +
theme_bw(base_line_size = 0.2) +
theme(axis.title.y = element_text(family='Helvetica', size = 12, face = 'bold'),
axis.title.x = element_text(family='Helvetica', size = 12, face = 'bold'),
plot.title = element_text(family='Helvetica', size = 12, face = 'bold'),
legend.position = 'bottom') +
guides(color = guide_legend(title = ''))
plot
png(filename = paste(figures_folder, '/Figure_02/Panel_D.png', sep = ''), units = 'in', width = 4.3, height = 5.5, res = 300)
print(plot)
dev.off()
UP_in_BP_CMML <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_upregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''), row.names = 'X')
UP_in_BP_CMML <- UP_in_BP_CMML %>% filter(GeneBiotype == 'protein_coding')
BP_CMML_genes <- (UP_in_BP_CMML %>% arrange(padj))$GeneSymbol[1:30]
# - - - - - - - - - - -
UP_in_healthy <- read.csv(paste(data_folder, '/RNASeq/DESeq2/DEGs_Comparisons/Control_vs_BP-CMML/DGE_BP-CMML_vs_Control_downregulated_padj_significant_DEGs_LFC_Ashr.csv', sep = ''), row.names = 'X')
UP_in_healthy <- UP_in_healthy %>% filter(GeneBiotype == 'protein_coding')
Healthy_genes <- ((UP_in_healthy %>% arrange(padj))$GeneSymbol[1:30])
genes_to_keep <- c(BP_CMML_genes, Healthy_genes)
vst_results <- read.csv(paste(data_folder, '/RNASeq/Counts/Processed_counts/Grouped/DGE_DESeq2_vst_normalised_countmat.csv', sep = ''), row.names = 'X')
colnames(vst_results) <- str_replace_all(colnames(vst_results), pattern = 'X', replacement = '')
vst_results_to_keep <- vst_results[grep(TRUE,vst_results$GeneSymbol %in% genes_to_keep),]
rownames(vst_results_to_keep) <- vst_results_to_keep$GeneSymbol
vst_results_to_keep$GeneSymbol <- NULL
vst_results_to_keep$GeneBiotype <- NULL
vst_results_to_keep_mat <- as.matrix(vst_results_to_keep)
vst_results_to_keep_mat_top30bot30 <- vst_results_to_keep_mat[genes_to_keep,]
scaled_genemat_ord_GeneSymbol <- t(scale(t(vst_results_to_keep_mat_top30bot30)))[,]
scaled_genemat_ord_GeneSymbol <- t(scaled_genemat_ord_GeneSymbol)
gene_identity <- data.frame(row.names = genes_to_keep)
gene_identity[BP_CMML_genes,'Group'] <- 'Up in BP CMML'
gene_identity[Healthy_genes,'Group'] <- 'Up in Control'
gene_identity$Group <- factor(gene_identity$Group, levels = c('Up in Control',
'Up in BP CMML'))
Phenotype_identity <- data.frame(row.names = colnames(dds))
Phenotype_identity$Condition <- dds$Condition
Phenotype_identity[rownames(Phenotype_identity %>% filter(Condition == 'BP-CMML')),'Condition'] <- 'BP-CMML'
Phenotype_identity$Condition <- factor(Phenotype_identity$Condition, levels = c(
'Control',
'BP-CMML'))
colors_annotation <-  list(Condition = c(
'Control'    = '#A4BECE',
'BP-CMML' = '#DD3429'))
ha <- rowAnnotation(df=Phenotype_identity, col = colors_annotation,
gp = gpar(lwd =0.5, col = 'white'),
simple_anno_size = unit(0.25, 'cm'),
show_annotation_name = F, show_legend = FALSE,
annotation_legend_param = list(Condition = list(direction = "horizontal")))
# Working on the rest of the heatmap
breaks_val <- seq(from = -1.5, to = 2, length.out = 13)
col_heatmap_guide <- colorRamp2(breaks = breaks_val,colors = rev(brew_mix))
set.seed(123)
Heatmap_genes <- Heatmap(scaled_genemat_ord_GeneSymbol, name = 'Scaled\nExpression',
col = col_heatmap_guide,
show_row_names = FALSE,
show_column_names = TRUE,
cluster_columns = TRUE,
cluster_rows = TRUE,
column_split = gene_identity$Group,
row_split = Phenotype_identity$Condition,
border = TRUE,
cluster_row_slices = F,
cluster_column_slices = F,
row_gap = unit(0.05, 'cm'),
column_gap = unit(0.05, 'cm'),
show_column_dend = FALSE,
row_dend_side = 'right',
column_names_side = 'bottom',
use_raster = FALSE,
rect_gp = gpar(col = "black", lwd = 0.05),
raster_by_magick = TRUE,
left_annotation = ha,
row_title_gp = gpar(fontsize = 0, angle=45),
row_names_gp = gpar(fontsize = 7, hjust=0),
column_title_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 4, hjust=0),
show_heatmap_legend = F,
heatmap_legend_param = list(
legend_direction = "horizontal",
legend_width = unit(5, "cm")))
Heatmap_genes
png(filename = paste(figures_folder, '/Figure_02/Panel_E.png', sep = ''), height = 10, width = 13, units = 'cm',res = 300)
ComplexHeatmap::draw(Heatmap_genes,
heatmap_legend_side = "bottom",
annotation_legend_side = "bottom")
dev.off()
